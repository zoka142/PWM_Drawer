
PWM_DRAWER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000016e6  0000177a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800080  00800080  0000179a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212d  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bec  00000000  00000000  00003aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cf  00000000  00000000  000046d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  00005aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fb  00000000  00000000  00005f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f7  00000000  00000000  0000693f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	e0 04       	cpc	r14, r0
      56:	63 05       	cpc	r22, r3
      58:	63 05       	cpc	r22, r3
      5a:	63 05       	cpc	r22, r3
      5c:	63 05       	cpc	r22, r3
      5e:	bf 04       	cpc	r11, r15
      60:	63 05       	cpc	r22, r3
      62:	63 05       	cpc	r22, r3
      64:	63 05       	cpc	r22, r3
      66:	63 05       	cpc	r22, r3
      68:	63 05       	cpc	r22, r3
      6a:	63 05       	cpc	r22, r3
      6c:	63 05       	cpc	r22, r3
      6e:	eb 04       	cpc	r14, r11
      70:	d5 04       	cpc	r13, r5
      72:	63 05       	cpc	r22, r3
      74:	f6 04       	cpc	r15, r6
      76:	01 05       	cpc	r16, r1
      78:	0c 05       	cpc	r16, r12
      7a:	17 05       	cpc	r17, r7
      7c:	22 05       	cpc	r18, r2
      7e:	2d 05       	cpc	r18, r13
      80:	38 05       	cpc	r19, r8
      82:	43 05       	cpc	r20, r3
      84:	4e 05       	cpc	r20, r14
      86:	59 05       	cpc	r21, r9
      88:	63 05       	cpc	r22, r3
      8a:	63 05       	cpc	r22, r3
      8c:	63 05       	cpc	r22, r3
      8e:	ca 04       	cpc	r12, r10
      90:	63 05       	cpc	r22, r3
      92:	63 05       	cpc	r22, r3
      94:	63 05       	cpc	r22, r3
      96:	04 04       	cpc	r0, r4
      98:	63 05       	cpc	r22, r3
      9a:	51 04       	cpc	r5, r1
      9c:	67 04       	cpc	r6, r7
      9e:	25 04       	cpc	r2, r5
      a0:	0f 04       	cpc	r0, r15
      a2:	63 05       	cpc	r22, r3
      a4:	88 04       	cpc	r8, r8
      a6:	b4 04       	cpc	r11, r4
      a8:	63 05       	cpc	r22, r3
      aa:	7d 04       	cpc	r7, r13
      ac:	63 05       	cpc	r22, r3
      ae:	9e 04       	cpc	r9, r14
      b0:	46 04       	cpc	r4, r6
      b2:	63 05       	cpc	r22, r3
      b4:	63 05       	cpc	r22, r3
      b6:	30 04       	cpc	r3, r0
      b8:	1a 04       	cpc	r1, r10
      ba:	a9 04       	cpc	r10, r9
      bc:	72 04       	cpc	r7, r2
      be:	3b 04       	cpc	r3, r11
      c0:	63 05       	cpc	r22, r3
      c2:	63 05       	cpc	r22, r3
      c4:	63 05       	cpc	r22, r3
      c6:	5c 04       	cpc	r5, r12
      c8:	93 04       	cpc	r9, r3
      ca:	63 05       	cpc	r22, r3
      cc:	63 05       	cpc	r22, r3
      ce:	63 05       	cpc	r22, r3
      d0:	63 05       	cpc	r22, r3
      d2:	63 05       	cpc	r22, r3
      d4:	63 05       	cpc	r22, r3
      d6:	04 04       	cpc	r0, r4
      d8:	63 05       	cpc	r22, r3
      da:	51 04       	cpc	r5, r1
      dc:	67 04       	cpc	r6, r7
      de:	25 04       	cpc	r2, r5
      e0:	0f 04       	cpc	r0, r15
      e2:	63 05       	cpc	r22, r3
      e4:	88 04       	cpc	r8, r8
      e6:	b4 04       	cpc	r11, r4
      e8:	63 05       	cpc	r22, r3
      ea:	7d 04       	cpc	r7, r13
      ec:	63 05       	cpc	r22, r3
      ee:	9e 04       	cpc	r9, r14
      f0:	46 04       	cpc	r4, r6
      f2:	63 05       	cpc	r22, r3
      f4:	63 05       	cpc	r22, r3
      f6:	30 04       	cpc	r3, r0
      f8:	1a 04       	cpc	r1, r10
      fa:	a9 04       	cpc	r10, r9
      fc:	72 04       	cpc	r7, r2
      fe:	3b 04       	cpc	r3, r11
     100:	63 05       	cpc	r22, r3
     102:	63 05       	cpc	r22, r3
     104:	63 05       	cpc	r22, r3
     106:	5c 04       	cpc	r5, r12
     108:	93 04       	cpc	r9, r3

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e6 ee       	ldi	r30, 0xE6	; 230
     11e:	f6 e1       	ldi	r31, 0x16	; 22
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	a0 38       	cpi	r26, 0x80	; 128
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	a0 e8       	ldi	r26, 0x80	; 128
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	a3 38       	cpi	r26, 0x83	; 131
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <main>
     140:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <PWM_Drawer_voidinit>:
#include "STD _TYPES.h"
#include "ICU_interface.h"

void PWM_Drawer_voidinit(void){
	#if GENERATE_PWM_FROM_SAME_MCU == 1
	GLCD_voidInit();
     148:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <GLCD_voidInit>
	PWM_voidInitChannel_0(PWM_ModeType,PWM_OutputMode);
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	0e 94 9f 08 	call	0x113e	; 0x113e <PWM_voidInitChannel_0>
	PWM_voidGenerateOnChannel_0(PWM_Prescaler,PWM_OutputMode,Duty_Cycle);	
     154:	4a e5       	ldi	r20, 0x5A	; 90
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	0e 94 d7 08 	call	0x11ae	; 0x11ae <PWM_voidGenerateOnChannel_0>
	ICU_voidinit(ICU_Prescaler);			
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	0e 94 82 07 	call	0xf04	; 0xf04 <ICU_voidinit>
     164:	08 95       	ret

00000166 <PWM_Drawer_voidMeasureSignal>:
	#else			
	PWM_voidInitChannel_0(PWM_ModeType,PWM_OutputMode);
	PWM_voidGenerateOnChannel_0(PWM_Prescaler,PWM_OutputMode,Duty_Cycle);		
	#endif
}
void PWM_Drawer_voidMeasureSignal(PWM_Drawer_SignalData *copy_pstructData){
     166:	8f 92       	push	r8
     168:	9f 92       	push	r9
     16a:	af 92       	push	r10
     16c:	bf 92       	push	r11
     16e:	cf 92       	push	r12
     170:	df 92       	push	r13
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	28 97       	sbiw	r28, 0x08	; 8
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	8c 01       	movw	r16, r24
	ICU_SignalData Duty={0,0};
     190:	19 82       	std	Y+1, r1	; 0x01
     192:	1a 82       	std	Y+2, r1	; 0x02
     194:	1b 82       	std	Y+3, r1	; 0x03
     196:	1c 82       	std	Y+4, r1	; 0x04
     198:	1d 82       	std	Y+5, r1	; 0x05
     19a:	1e 82       	std	Y+6, r1	; 0x06
     19c:	1f 82       	std	Y+7, r1	; 0x07
     19e:	18 86       	std	Y+8, r1	; 0x08
	ICU_voidGetDuty(ICU_Prescaler,&Duty);
     1a0:	be 01       	movw	r22, r28
     1a2:	6f 5f       	subi	r22, 0xFF	; 255
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	0e 94 de 07 	call	0xfbc	; 0xfbc <ICU_voidGetDuty>
	copy_pstructData->Period_Time_ms = Duty.Period_Time_ms;
     1ac:	cd 80       	ldd	r12, Y+5	; 0x05
     1ae:	de 80       	ldd	r13, Y+6	; 0x06
     1b0:	ef 80       	ldd	r14, Y+7	; 0x07
     1b2:	f8 84       	ldd	r15, Y+8	; 0x08
     1b4:	f8 01       	movw	r30, r16
     1b6:	c1 86       	std	Z+9, r12	; 0x09
     1b8:	d2 86       	std	Z+10, r13	; 0x0a
     1ba:	e3 86       	std	Z+11, r14	; 0x0b
     1bc:	f4 86       	std	Z+12, r15	; 0x0c
	copy_pstructData->High_Time_ms = Duty.High_Time_ms;
     1be:	89 80       	ldd	r8, Y+1	; 0x01
     1c0:	9a 80       	ldd	r9, Y+2	; 0x02
     1c2:	ab 80       	ldd	r10, Y+3	; 0x03
     1c4:	bc 80       	ldd	r11, Y+4	; 0x04
     1c6:	81 82       	std	Z+1, r8	; 0x01
     1c8:	92 82       	std	Z+2, r9	; 0x02
     1ca:	a3 82       	std	Z+3, r10	; 0x03
     1cc:	b4 82       	std	Z+4, r11	; 0x04
	copy_pstructData->Low_Time_ms = Duty.Period_Time_ms - Duty.High_Time_ms;
     1ce:	a5 01       	movw	r20, r10
     1d0:	94 01       	movw	r18, r8
     1d2:	c7 01       	movw	r24, r14
     1d4:	b6 01       	movw	r22, r12
     1d6:	0e 94 35 09 	call	0x126a	; 0x126a <__subsf3>
     1da:	f8 01       	movw	r30, r16
     1dc:	65 83       	std	Z+5, r22	; 0x05
     1de:	76 83       	std	Z+6, r23	; 0x06
     1e0:	87 83       	std	Z+7, r24	; 0x07
     1e2:	90 87       	std	Z+8, r25	; 0x08
	
	copy_pstructData->Freq_kHz = (1.0 / (copy_pstructData->Period_Time_ms));
     1e4:	a7 01       	movw	r20, r14
     1e6:	96 01       	movw	r18, r12
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	9f e3       	ldi	r25, 0x3F	; 63
     1f0:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     1f4:	f8 01       	movw	r30, r16
     1f6:	65 87       	std	Z+13, r22	; 0x0d
     1f8:	76 87       	std	Z+14, r23	; 0x0e
     1fa:	87 87       	std	Z+15, r24	; 0x0f
     1fc:	90 8b       	std	Z+16, r25	; 0x10
	copy_pstructData->Duty_Percent = (u8)((copy_pstructData->High_Time_ms) * 100.0 / (copy_pstructData->Period_Time_ms));
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	48 ec       	ldi	r20, 0xC8	; 200
     204:	52 e4       	ldi	r21, 0x42	; 66
     206:	c5 01       	movw	r24, r10
     208:	b4 01       	movw	r22, r8
     20a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
     20e:	a7 01       	movw	r20, r14
     210:	96 01       	movw	r18, r12
     212:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     216:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     21a:	f8 01       	movw	r30, r16
     21c:	60 83       	st	Z, r22
}
     21e:	28 96       	adiw	r28, 0x08	; 8
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	cf 90       	pop	r12
     23a:	bf 90       	pop	r11
     23c:	af 90       	pop	r10
     23e:	9f 90       	pop	r9
     240:	8f 90       	pop	r8
     242:	08 95       	ret

00000244 <PWM_Drawer_voidDraw>:
void PWM_Drawer_voidDraw(PWM_Drawer_SignalData *copy_pstructData,f32 copy_f32Scale){
     244:	cf 92       	push	r12
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	8c 01       	movw	r16, r24
     256:	6a 01       	movw	r12, r20
     258:	7b 01       	movw	r14, r22
	GLCD_voidClearDisplay();
     25a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <GLCD_voidClearDisplay>
	GlCD_voidGoToLine(0);
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	GLCD_voidString("frequency=");
     264:	80 e6       	ldi	r24, 0x60	; 96
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	GLCD_voidFloat(copy_pstructData->Freq_kHz);
     26c:	f8 01       	movw	r30, r16
     26e:	65 85       	ldd	r22, Z+13	; 0x0d
     270:	76 85       	ldd	r23, Z+14	; 0x0e
     272:	87 85       	ldd	r24, Z+15	; 0x0f
     274:	90 89       	ldd	r25, Z+16	; 0x10
     276:	0e 94 18 06 	call	0xc30	; 0xc30 <GLCD_voidFloat>
	GLCD_voidString("khz");
     27a:	8b e6       	ldi	r24, 0x6B	; 107
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	
	GlCD_voidGoToLine(1);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	GLCD_voidString("duty=");
     288:	8f e6       	ldi	r24, 0x6F	; 111
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	GLCD_voidInteger(copy_pstructData->Duty_Percent);
     290:	f8 01       	movw	r30, r16
     292:	80 81       	ld	r24, Z
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 ca 05 	call	0xb94	; 0xb94 <GLCD_voidInteger>
	GLCD_voidString("%");
     29a:	85 e7       	ldi	r24, 0x75	; 117
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	
	GlCD_voidGoToLine(4);
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	GLCD_voidString("time=");
     2a8:	87 e7       	ldi	r24, 0x77	; 119
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	GLCD_voidFloat(copy_pstructData->Period_Time_ms);
     2b0:	f8 01       	movw	r30, r16
     2b2:	61 85       	ldd	r22, Z+9	; 0x09
     2b4:	72 85       	ldd	r23, Z+10	; 0x0a
     2b6:	83 85       	ldd	r24, Z+11	; 0x0b
     2b8:	94 85       	ldd	r25, Z+12	; 0x0c
     2ba:	0e 94 18 06 	call	0xc30	; 0xc30 <GLCD_voidFloat>
	GLCD_voidString("ms");
     2be:	8d e7       	ldi	r24, 0x7D	; 125
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 90 05 	call	0xb20	; 0xb20 <GLCD_voidString>
	
	GlCD_voidGoToLine(5);
     2c6:	85 e0       	ldi	r24, 0x05	; 5
     2c8:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	3e e3       	ldi	r19, 0x3E	; 62
     2d0:	48 e0       	ldi	r20, 0x08	; 8
     2d2:	5c e1       	ldi	r21, 0x1C	; 28
     2d4:	6a e2       	ldi	r22, 0x2A	; 42
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
	for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
     2e2:	0b c0       	rjmp	.+22     	; 0x2fa <PWM_Drawer_voidDraw+0xb6>
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     2e4:	28 e0       	ldi	r18, 0x08	; 8
     2e6:	38 e0       	ldi	r19, 0x08	; 8
     2e8:	48 e0       	ldi	r20, 0x08	; 8
     2ea:	58 e0       	ldi	r21, 0x08	; 8
     2ec:	68 e0       	ldi	r22, 0x08	; 8
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
	GLCD_voidFloat(copy_pstructData->Period_Time_ms);
	GLCD_voidString("ms");
	
	GlCD_voidGoToLine(5);
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
     2f8:	cf 5f       	subi	r28, 0xFF	; 255
     2fa:	f8 01       	movw	r30, r16
     2fc:	61 81       	ldd	r22, Z+1	; 0x01
     2fe:	72 81       	ldd	r23, Z+2	; 0x02
     300:	83 81       	ldd	r24, Z+3	; 0x03
     302:	94 81       	ldd	r25, Z+4	; 0x04
     304:	a7 01       	movw	r20, r14
     306:	96 01       	movw	r18, r12
     308:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     30c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     310:	c6 17       	cp	r28, r22
     312:	40 f3       	brcs	.-48     	; 0x2e4 <PWM_Drawer_voidDraw+0xa0>
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     314:	28 e0       	ldi	r18, 0x08	; 8
     316:	38 e0       	ldi	r19, 0x08	; 8
     318:	48 e0       	ldi	r20, 0x08	; 8
     31a:	58 e0       	ldi	r21, 0x08	; 8
     31c:	68 e0       	ldi	r22, 0x08	; 8
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
	for (u8 i = 0; i < ((u8)(copy_pstructData->Low_Time_ms / copy_f32Scale)); i++) {
     328:	c0 e0       	ldi	r28, 0x00	; 0
     32a:	0b c0       	rjmp	.+22     	; 0x342 <PWM_Drawer_voidDraw+0xfe>
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     32c:	28 e0       	ldi	r18, 0x08	; 8
     32e:	38 e0       	ldi	r19, 0x08	; 8
     330:	48 e0       	ldi	r20, 0x08	; 8
     332:	58 e0       	ldi	r21, 0x08	; 8
     334:	68 e0       	ldi	r22, 0x08	; 8
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (u8 i = 0; i < ((u8)(copy_pstructData->Low_Time_ms / copy_f32Scale)); i++) {
     340:	cf 5f       	subi	r28, 0xFF	; 255
     342:	f8 01       	movw	r30, r16
     344:	65 81       	ldd	r22, Z+5	; 0x05
     346:	76 81       	ldd	r23, Z+6	; 0x06
     348:	87 81       	ldd	r24, Z+7	; 0x07
     34a:	90 85       	ldd	r25, Z+8	; 0x08
     34c:	a7 01       	movw	r20, r14
     34e:	96 01       	movw	r18, r12
     350:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     354:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     358:	c6 17       	cp	r28, r22
     35a:	40 f3       	brcs	.-48     	; 0x32c <PWM_Drawer_voidDraw+0xe8>
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GlCD_voidSpecialChar(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
     35c:	2a e2       	ldi	r18, 0x2A	; 42
     35e:	3c e1       	ldi	r19, 0x1C	; 28
     360:	48 e0       	ldi	r20, 0x08	; 8
     362:	5e e3       	ldi	r21, 0x3E	; 62
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>

		
	
	GlCD_voidGoToLine(6);
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	u8 pixel_width_count = 0;
     376:	c0 e0       	ldi	r28, 0x00	; 0
	while (pixel_width_count <120 ) {
     378:	4c c0       	rjmp	.+152    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
     37a:	20 e4       	ldi	r18, 0x40	; 64
     37c:	30 e4       	ldi	r19, 0x40	; 64
     37e:	4e e7       	ldi	r20, 0x7E	; 126
     380:	52 e0       	ldi	r21, 0x02	; 2
     382:	62 e0       	ldi	r22, 0x02	; 2
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     38e:	cb 5f       	subi	r28, 0xFB	; 251
		for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
     390:	d0 e0       	ldi	r29, 0x00	; 0
     392:	0c c0       	rjmp	.+24     	; 0x3ac <PWM_Drawer_voidDraw+0x168>
			GlCD_voidSpecialChar(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	32 e0       	ldi	r19, 0x02	; 2
     398:	42 e0       	ldi	r20, 0x02	; 2
     39a:	52 e0       	ldi	r21, 0x02	; 2
     39c:	62 e0       	ldi	r22, 0x02	; 2
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     3a8:	cb 5f       	subi	r28, 0xFB	; 251
	
	GlCD_voidGoToLine(6);
	u8 pixel_width_count = 0;
	while (pixel_width_count <120 ) {
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
     3aa:	df 5f       	subi	r29, 0xFF	; 255
     3ac:	f8 01       	movw	r30, r16
     3ae:	61 81       	ldd	r22, Z+1	; 0x01
     3b0:	72 81       	ldd	r23, Z+2	; 0x02
     3b2:	83 81       	ldd	r24, Z+3	; 0x03
     3b4:	94 81       	ldd	r25, Z+4	; 0x04
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     3be:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     3c2:	d6 17       	cp	r29, r22
     3c4:	38 f3       	brcs	.-50     	; 0x394 <PWM_Drawer_voidDraw+0x150>
			GlCD_voidSpecialChar(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
     3c6:	22 e0       	ldi	r18, 0x02	; 2
     3c8:	32 e0       	ldi	r19, 0x02	; 2
     3ca:	4e e7       	ldi	r20, 0x7E	; 126
     3cc:	50 e4       	ldi	r21, 0x40	; 64
     3ce:	60 e4       	ldi	r22, 0x40	; 64
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     3da:	cb 5f       	subi	r28, 0xFB	; 251
		for (u8 i = 0; i < ((u8)(copy_pstructData->Low_Time_ms / copy_f32Scale)); i++) {
     3dc:	d0 e0       	ldi	r29, 0x00	; 0
     3de:	0c c0       	rjmp	.+24     	; 0x3f8 <PWM_Drawer_voidDraw+0x1b4>
			GlCD_voidSpecialChar(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
     3e0:	20 e4       	ldi	r18, 0x40	; 64
     3e2:	30 e4       	ldi	r19, 0x40	; 64
     3e4:	40 e4       	ldi	r20, 0x40	; 64
     3e6:	50 e4       	ldi	r21, 0x40	; 64
     3e8:	60 e4       	ldi	r22, 0x40	; 64
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     3f4:	cb 5f       	subi	r28, 0xFB	; 251
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (u8 i = 0; i < ((u8)(copy_pstructData->High_Time_ms / copy_f32Scale)); i++) {
			GlCD_voidSpecialChar(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GlCD_voidSpecialChar(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (u8 i = 0; i < ((u8)(copy_pstructData->Low_Time_ms / copy_f32Scale)); i++) {
     3f6:	df 5f       	subi	r29, 0xFF	; 255
     3f8:	f8 01       	movw	r30, r16
     3fa:	65 81       	ldd	r22, Z+5	; 0x05
     3fc:	76 81       	ldd	r23, Z+6	; 0x06
     3fe:	87 81       	ldd	r24, Z+7	; 0x07
     400:	90 85       	ldd	r25, Z+8	; 0x08
     402:	a7 01       	movw	r20, r14
     404:	96 01       	movw	r18, r12
     406:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     40a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     40e:	d6 17       	cp	r29, r22
     410:	38 f3       	brcs	.-50     	; 0x3e0 <PWM_Drawer_voidDraw+0x19c>

		
	
	GlCD_voidGoToLine(6);
	u8 pixel_width_count = 0;
	while (pixel_width_count <120 ) {
     412:	c8 37       	cpi	r28, 0x78	; 120
     414:	08 f4       	brcc	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     416:	b1 cf       	rjmp	.-158    	; 0x37a <PWM_Drawer_voidDraw+0x136>
		for (u8 i = 0; i < ((u8)(copy_pstructData->Low_Time_ms / copy_f32Scale)); i++) {
			GlCD_voidSpecialChar(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}
	
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <GLCD_voidCMD>:
	GLCD_voidCMD(0b11000000);
	_delay_ms(1);
	GLCD_voidSelectPage(GLCD_PAGE_0);
	_delay_ms(1);
}
void GLCD_voidCMD(u8 copy_u8Cmd){
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(GLCD_RS_PORT,GLCD_RS_PIN,DIO_PIN_LOW);
     42e:	40 e0       	ldi	r20, 0x00	; 0
     430:	62 e0       	ldi	r22, 0x02	; 2
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_RW_PORT,GLCD_RW_PIN,DIO_PIN_LOW);
     438:	40 e0       	ldi	r20, 0x00	; 0
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D0_PORT,GLCD_D0_PIN, GET_BIT(copy_u8Cmd,0));
     442:	4c 2f       	mov	r20, r28
     444:	41 70       	andi	r20, 0x01	; 1
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D1_PORT,GLCD_D1_PIN, GET_BIT(copy_u8Cmd,1));
     44e:	c1 fb       	bst	r28, 1
     450:	44 27       	eor	r20, r20
     452:	40 f9       	bld	r20, 0
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D2_PORT,GLCD_D2_PIN, GET_BIT(copy_u8Cmd,2));
     45c:	c2 fb       	bst	r28, 2
     45e:	44 27       	eor	r20, r20
     460:	40 f9       	bld	r20, 0
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D3_PORT,GLCD_D3_PIN, GET_BIT(copy_u8Cmd,3));
     46a:	c3 fb       	bst	r28, 3
     46c:	44 27       	eor	r20, r20
     46e:	40 f9       	bld	r20, 0
     470:	63 e0       	ldi	r22, 0x03	; 3
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D4_PORT,GLCD_D4_PIN, GET_BIT(copy_u8Cmd,4));
     478:	c4 fb       	bst	r28, 4
     47a:	44 27       	eor	r20, r20
     47c:	40 f9       	bld	r20, 0
     47e:	64 e0       	ldi	r22, 0x04	; 4
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D5_PORT,GLCD_D5_PIN, GET_BIT(copy_u8Cmd,5));
     486:	c5 fb       	bst	r28, 5
     488:	44 27       	eor	r20, r20
     48a:	40 f9       	bld	r20, 0
     48c:	65 e0       	ldi	r22, 0x05	; 5
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D6_PORT,GLCD_D6_PIN, GET_BIT(copy_u8Cmd,6));
     494:	c6 fb       	bst	r28, 6
     496:	44 27       	eor	r20, r20
     498:	40 f9       	bld	r20, 0
     49a:	66 e0       	ldi	r22, 0x06	; 6
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D7_PORT,GLCD_D7_PIN, GET_BIT(copy_u8Cmd,7));
     4a2:	4c 2f       	mov	r20, r28
     4a4:	44 1f       	adc	r20, r20
     4a6:	44 27       	eor	r20, r20
     4a8:	44 1f       	adc	r20, r20
     4aa:	67 e0       	ldi	r22, 0x07	; 7
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_E_PORT,GLCD_E_PIN,DIO_PIN_HIGH);
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4bc:	8f e9       	ldi	r24, 0x9F	; 159
     4be:	9f e0       	ldi	r25, 0x0F	; 15
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <GLCD_voidCMD+0x96>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <GLCD_voidCMD+0x9c>
     4c6:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(GLCD_E_PORT,GLCD_E_PIN,DIO_PIN_LOW);
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
}
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <GLCD_voidData>:
void GLCD_voidData(u8 copy_u8Data){
     4d6:	cf 93       	push	r28
     4d8:	c8 2f       	mov	r28, r24
	
	DIO_voidSetPinValue(GLCD_RS_PORT,GLCD_RS_PIN,DIO_PIN_HIGH);
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_RW_PORT,GLCD_RW_PIN,DIO_PIN_LOW);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D0_PORT,GLCD_D0_PIN, GET_BIT(copy_u8Data,0));
     4ee:	4c 2f       	mov	r20, r28
     4f0:	41 70       	andi	r20, 0x01	; 1
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D1_PORT,GLCD_D1_PIN, GET_BIT(copy_u8Data,1));
     4fa:	c1 fb       	bst	r28, 1
     4fc:	44 27       	eor	r20, r20
     4fe:	40 f9       	bld	r20, 0
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D2_PORT,GLCD_D2_PIN, GET_BIT(copy_u8Data,2));
     508:	c2 fb       	bst	r28, 2
     50a:	44 27       	eor	r20, r20
     50c:	40 f9       	bld	r20, 0
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D3_PORT,GLCD_D3_PIN, GET_BIT(copy_u8Data,3));
     516:	c3 fb       	bst	r28, 3
     518:	44 27       	eor	r20, r20
     51a:	40 f9       	bld	r20, 0
     51c:	63 e0       	ldi	r22, 0x03	; 3
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D4_PORT,GLCD_D4_PIN, GET_BIT(copy_u8Data,4));
     524:	c4 fb       	bst	r28, 4
     526:	44 27       	eor	r20, r20
     528:	40 f9       	bld	r20, 0
     52a:	64 e0       	ldi	r22, 0x04	; 4
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D5_PORT,GLCD_D5_PIN, GET_BIT(copy_u8Data,5));
     532:	c5 fb       	bst	r28, 5
     534:	44 27       	eor	r20, r20
     536:	40 f9       	bld	r20, 0
     538:	65 e0       	ldi	r22, 0x05	; 5
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D6_PORT,GLCD_D6_PIN, GET_BIT(copy_u8Data,6));
     540:	c6 fb       	bst	r28, 6
     542:	44 27       	eor	r20, r20
     544:	40 f9       	bld	r20, 0
     546:	66 e0       	ldi	r22, 0x06	; 6
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_D7_PORT,GLCD_D7_PIN, GET_BIT(copy_u8Data,7));
     54e:	4c 2f       	mov	r20, r28
     550:	44 1f       	adc	r20, r20
     552:	44 27       	eor	r20, r20
     554:	44 1f       	adc	r20, r20
     556:	67 e0       	ldi	r22, 0x07	; 7
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GLCD_E_PORT,GLCD_E_PIN,DIO_PIN_HIGH);
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
     568:	8f e9       	ldi	r24, 0x9F	; 159
     56a:	9f e0       	ldi	r25, 0x0F	; 15
     56c:	01 97       	sbiw	r24, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <GLCD_voidData+0x96>
     570:	00 c0       	rjmp	.+0      	; 0x572 <GLCD_voidData+0x9c>
     572:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(GLCD_E_PORT,GLCD_E_PIN,DIO_PIN_LOW);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
}
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <GLCD_voidSelectPage>:
void GLCD_voidSelectPage(u8 copy_u8Page){
	switch (copy_u8Page){
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	89 f0       	breq	.+34     	; 0x5a8 <GLCD_voidSelectPage+0x26>
     586:	28 f0       	brcs	.+10     	; 0x592 <GLCD_voidSelectPage+0x10>
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	d9 f0       	breq	.+54     	; 0x5c2 <GLCD_voidSelectPage+0x40>
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	39 f1       	breq	.+78     	; 0x5de <GLCD_voidSelectPage+0x5c>
     590:	08 95       	ret
		case GLCD_NO_PAGES:
			DIO_voidSetPinValue(GLCD_CS1_PORT,GLCD_CS1_PIN,DIO_PIN_LOW);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	64 e0       	ldi	r22, 0x04	; 4
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PIN_LOW);
     59c:	40 e0       	ldi	r20, 0x00	; 0
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			break;
     5a6:	08 95       	ret
			case GLCD_PAGE_0:
			DIO_voidSetPinValue(GLCD_CS1_PORT,GLCD_CS1_PIN,DIO_PIN_HIGH);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	64 e0       	ldi	r22, 0x04	; 4
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PIN_LOW);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	65 e0       	ldi	r22, 0x05	; 5
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			GLCD_u8CurrentPage = 0;
     5bc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__data_end>
			break;
     5c0:	08 95       	ret
			case GLCD_PAGE_1:
			DIO_voidSetPinValue(GLCD_CS1_PORT,GLCD_CS1_PIN,DIO_PIN_LOW);
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PIN_HIGH);
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	65 e0       	ldi	r22, 0x05	; 5
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			GLCD_u8CurrentPage = 1;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
			break;
     5dc:	08 95       	ret
			case GLCD_BOTH_PAGES:
			DIO_voidSetPinValue(GLCD_CS1_PORT,GLCD_CS1_PIN,DIO_PIN_HIGH);
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	64 e0       	ldi	r22, 0x04	; 4
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PIN_HIGH);
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	65 e0       	ldi	r22, 0x05	; 5
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
     5f2:	08 95       	ret

000005f4 <GLCD_voidInit>:

u8 GLCD_u8CurrentY_address = 0;
u8 GLCD_u8CurrentX_address = 0;
u8 GLCD_u8CurrentPage	   = 0;
void GLCD_voidInit(void){
	DIO_voidSetPinDirection(GLCD_RS_PORT,GLCD_RS_PIN,DIO_PORT_OUTPUT);
     5f4:	41 e0       	ldi	r20, 0x01	; 1
     5f6:	62 e0       	ldi	r22, 0x02	; 2
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_RW_PORT,GLCD_RW_PIN,DIO_PORT_OUTPUT);
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_E_PORT,GLCD_E_PIN,DIO_PORT_OUTPUT);
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_RST_PORT,GLCD_RST_PIN,DIO_PORT_OUTPUT);
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	66 e0       	ldi	r22, 0x06	; 6
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_CS1_PORT,GLCD_CS1_PIN,DIO_PORT_OUTPUT);
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PORT_OUTPUT);
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	65 e0       	ldi	r22, 0x05	; 5
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D0_PORT,GLCD_D0_PIN,DIO_PORT_OUTPUT);
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D1_PORT,GLCD_D1_PIN,DIO_PORT_OUTPUT);
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D2_PORT,GLCD_D2_PIN,DIO_PORT_OUTPUT);
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	62 e0       	ldi	r22, 0x02	; 2
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D3_PORT,GLCD_D3_PIN,DIO_PORT_OUTPUT);
     64e:	41 e0       	ldi	r20, 0x01	; 1
     650:	63 e0       	ldi	r22, 0x03	; 3
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D4_PORT,GLCD_D4_PIN,DIO_PORT_OUTPUT);
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	64 e0       	ldi	r22, 0x04	; 4
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D5_PORT,GLCD_D5_PIN,DIO_PORT_OUTPUT);
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	65 e0       	ldi	r22, 0x05	; 5
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D6_PORT,GLCD_D6_PIN,DIO_PORT_OUTPUT);
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	66 e0       	ldi	r22, 0x06	; 6
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GLCD_D7_PORT,GLCD_D7_PIN,DIO_PORT_OUTPUT);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	67 e0       	ldi	r22, 0x07	; 7
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	
	DIO_voidSetPinValue(GLCD_RST_PORT,GLCD_RST_PIN,DIO_PIN_LOW);
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	66 e0       	ldi	r22, 0x06	; 6
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
     68a:	8f e3       	ldi	r24, 0x3F	; 63
     68c:	9c e9       	ldi	r25, 0x9C	; 156
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <GLCD_voidInit+0x9a>
     692:	00 c0       	rjmp	.+0      	; 0x694 <GLCD_voidInit+0xa0>
     694:	00 00       	nop
	_delay_ms(10);
	DIO_voidSetPinValue(GLCD_RST_PORT,GLCD_RST_PIN,DIO_PIN_HIGH);
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	66 e0       	ldi	r22, 0x06	; 6
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 09 07 	call	0xe12	; 0xe12 <DIO_voidSetPinValue>
     6a0:	8f e9       	ldi	r24, 0x9F	; 159
     6a2:	9f e0       	ldi	r25, 0x0F	; 15
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <GLCD_voidInit+0xb0>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <GLCD_voidInit+0xb6>
     6aa:	00 00       	nop
	_delay_ms(1);
	GLCD_voidSelectPage(GLCD_BOTH_PAGES);
     6ac:	83 e0       	ldi	r24, 0x03	; 3
     6ae:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
     6b2:	8f e9       	ldi	r24, 0x9F	; 159
     6b4:	9f e0       	ldi	r25, 0x0F	; 15
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <GLCD_voidInit+0xc2>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <GLCD_voidInit+0xc8>
     6bc:	00 00       	nop
	_delay_ms(1);
	GLCD_voidCMD(0b00111111);
     6be:	8f e3       	ldi	r24, 0x3F	; 63
     6c0:	0e 94 15 02 	call	0x42a	; 0x42a <GLCD_voidCMD>
	GLCD_voidCMD(0b11000000);
     6c4:	80 ec       	ldi	r24, 0xC0	; 192
     6c6:	0e 94 15 02 	call	0x42a	; 0x42a <GLCD_voidCMD>
     6ca:	8f e9       	ldi	r24, 0x9F	; 159
     6cc:	9f e0       	ldi	r25, 0x0F	; 15
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <GLCD_voidInit+0xda>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <GLCD_voidInit+0xe0>
     6d4:	00 00       	nop
	_delay_ms(1);
	GLCD_voidSelectPage(GLCD_PAGE_0);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
     6dc:	8f e9       	ldi	r24, 0x9F	; 159
     6de:	9f e0       	ldi	r25, 0x0F	; 15
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <GLCD_voidInit+0xec>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <GLCD_voidInit+0xf2>
     6e6:	00 00       	nop
     6e8:	08 95       	ret

000006ea <GLCD_voidSetCursor>:
			DIO_voidSetPinValue(GLCD_CS2_PORT,GLCD_CS2_PIN,DIO_PIN_HIGH);
			break;
	}
}
void GLCD_voidSetCursor(u16 copy_u16x,u16 copy_u16y){
	GLCD_u8CurrentX_address =+copy_u16x;
     6ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <GLCD_u8CurrentX_address>
	GLCD_u8CurrentY_address =+copy_u16y;
     6ee:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <GLCD_u8CurrentY_address>
	GLCD_voidCMD(0xB8+GLCD_u8CurrentX_address);
     6f2:	88 54       	subi	r24, 0x48	; 72
     6f4:	0e 94 15 02 	call	0x42a	; 0x42a <GLCD_voidCMD>
	GLCD_voidCMD(0x40+GLCD_u8CurrentY_address);
     6f8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     6fc:	80 5c       	subi	r24, 0xC0	; 192
     6fe:	0e 94 15 02 	call	0x42a	; 0x42a <GLCD_voidCMD>
     702:	08 95       	ret

00000704 <GlCD_voidGoToLine>:
			GlCD_voidGoToLine(GLCD_u8CurrentX_address);
		}
	}
	
}
void GlCD_voidGoToLine(u8 copy_u8Line){
     704:	cf 93       	push	r28
	if (copy_u8Line < 8){
     706:	88 30       	cpi	r24, 0x08	; 8
     708:	60 f4       	brcc	.+24     	; 0x722 <GlCD_voidGoToLine+0x1e>
     70a:	c8 2f       	mov	r28, r24
		GLCD_voidSelectPage(GLCD_PAGE_0);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
		GLCD_voidSetCursor(copy_u8Line,0);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	8c 2f       	mov	r24, r28
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 75 03 	call	0x6ea	; 0x6ea <GLCD_voidSetCursor>
		GLCD_u8CurrentY_address = 0;
     71e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <GLCD_u8CurrentY_address>
	}
	
}
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <GlCD_voidSpecialChar>:
	else
	{
		// return Error state
	}
	}
void GlCD_voidSpecialChar(u64 copy_u64Special){
     726:	8f 92       	push	r8
     728:	9f 92       	push	r9
     72a:	af 92       	push	r10
     72c:	bf 92       	push	r11
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	82 2e       	mov	r8, r18
     740:	93 2e       	mov	r9, r19
     742:	a4 2e       	mov	r10, r20
     744:	b5 2e       	mov	r11, r21
     746:	c6 2e       	mov	r12, r22
     748:	d7 2e       	mov	r13, r23
     74a:	e8 2e       	mov	r14, r24
     74c:	f9 2e       	mov	r15, r25
	for(int i=0 ; i < 5 ; i++){
     74e:	c0 e0       	ldi	r28, 0x00	; 0
     750:	d0 e0       	ldi	r29, 0x00	; 0
     752:	3e c0       	rjmp	.+124    	; 0x7d0 <GlCD_voidSpecialChar+0xaa>
		GLCD_voidSetCursor(GLCD_u8CurrentX_address,GLCD_u8CurrentY_address);
     754:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <GLCD_u8CurrentX_address>
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 75 03 	call	0x6ea	; 0x6ea <GLCD_voidSetCursor>
		GLCD_voidData((copy_u64Special>>(i*8U)) & 0xFF);
     764:	28 2d       	mov	r18, r8
     766:	39 2d       	mov	r19, r9
     768:	4a 2d       	mov	r20, r10
     76a:	5b 2d       	mov	r21, r11
     76c:	6c 2d       	mov	r22, r12
     76e:	7d 2d       	mov	r23, r13
     770:	8e 2d       	mov	r24, r14
     772:	9f 2d       	mov	r25, r15
     774:	8e 01       	movw	r16, r28
     776:	00 0f       	add	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	00 0f       	add	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	00 0f       	add	r16, r16
     780:	11 1f       	adc	r17, r17
     782:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__lshrdi3>
     786:	82 2f       	mov	r24, r18
     788:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <GLCD_voidData>
		GLCD_u8CurrentY_address++;
     78c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <GLCD_u8CurrentY_address>
		if(GLCD_u8CurrentY_address>=60 && GLCD_u8CurrentPage == 0){
     796:	8c 33       	cpi	r24, 0x3C	; 60
     798:	48 f0       	brcs	.+18     	; 0x7ac <GlCD_voidSpecialChar+0x86>
     79a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     79e:	81 11       	cpse	r24, r1
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <GlCD_voidSpecialChar+0x86>
			GLCD_voidSelectPage(GLCD_PAGE_1);
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
			GLCD_u8CurrentY_address=0;
     7a8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <GLCD_u8CurrentY_address>
		}
		if(GLCD_u8CurrentY_address>=60 && GLCD_u8CurrentPage == 1){
     7ac:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     7b0:	8c 33       	cpi	r24, 0x3C	; 60
     7b2:	68 f0       	brcs	.+26     	; 0x7ce <GlCD_voidSpecialChar+0xa8>
     7b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	49 f4       	brne	.+18     	; 0x7ce <GlCD_voidSpecialChar+0xa8>
			GLCD_voidSelectPage(GLCD_PAGE_0);
     7bc:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
			GLCD_u8CurrentX_address++;
     7c0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <GLCD_u8CurrentX_address>
     7c4:	8f 5f       	subi	r24, 0xFF	; 255
     7c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <GLCD_u8CurrentX_address>
			GlCD_voidGoToLine(GLCD_u8CurrentX_address);
     7ca:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
	{
		// return Error state
	}
	}
void GlCD_voidSpecialChar(u64 copy_u64Special){
	for(int i=0 ; i < 5 ; i++){
     7ce:	21 96       	adiw	r28, 0x01	; 1
     7d0:	c5 30       	cpi	r28, 0x05	; 5
     7d2:	d1 05       	cpc	r29, r1
     7d4:	0c f4       	brge	.+2      	; 0x7d8 <GlCD_voidSpecialChar+0xb2>
     7d6:	be cf       	rjmp	.-132    	; 0x754 <GlCD_voidSpecialChar+0x2e>
			GLCD_u8CurrentX_address++;
			GlCD_voidGoToLine(GLCD_u8CurrentX_address);
		}
	}
	
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	08 95       	ret

000007f2 <GLCD_voidChar>:
	GLCD_voidCMD(0xB8+GLCD_u8CurrentX_address);
	GLCD_voidCMD(0x40+GLCD_u8CurrentY_address);
}
void GLCD_voidChar(u8 copy_u8Char){
	
		switch (copy_u8Char) {
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	b0 97       	sbiw	r30, 0x20	; 32
     7f8:	eb 35       	cpi	r30, 0x5B	; 91
     7fa:	f1 05       	cpc	r31, r1
     7fc:	08 f0       	brcs	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	63 c1       	rjmp	.+710    	; 0xac6 <__stack+0x267>
     800:	e6 5d       	subi	r30, 0xD6	; 214
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__tablejump2__>
			case 'A': case 'a': GlCD_voidSpecialChar(GLCD_CHAR_A); break;
     808:	2c e7       	ldi	r18, 0x7C	; 124
     80a:	32 e1       	ldi	r19, 0x12	; 18
     80c:	41 e1       	ldi	r20, 0x11	; 17
     80e:	52 e1       	ldi	r21, 0x12	; 18
     810:	6c e7       	ldi	r22, 0x7C	; 124
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     81c:	54 c1       	rjmp	.+680    	; 0xac6 <__stack+0x267>
			case 'F': case 'f': GlCD_voidSpecialChar(GLCD_CHAR_F); break;
     81e:	2f e7       	ldi	r18, 0x7F	; 127
     820:	39 e0       	ldi	r19, 0x09	; 9
     822:	49 e0       	ldi	r20, 0x09	; 9
     824:	59 e0       	ldi	r21, 0x09	; 9
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     832:	49 c1       	rjmp	.+658    	; 0xac6 <__stack+0x267>
			case 'R': case 'r': GlCD_voidSpecialChar(GLCD_CHAR_R); break;
     834:	2f e7       	ldi	r18, 0x7F	; 127
     836:	39 e0       	ldi	r19, 0x09	; 9
     838:	49 e1       	ldi	r20, 0x19	; 25
     83a:	59 e2       	ldi	r21, 0x29	; 41
     83c:	6f e4       	ldi	r22, 0x4F	; 79
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     848:	3e c1       	rjmp	.+636    	; 0xac6 <__stack+0x267>
			case 'E': case 'e': GlCD_voidSpecialChar(GLCD_CHAR_E); break;
     84a:	2f e7       	ldi	r18, 0x7F	; 127
     84c:	39 e4       	ldi	r19, 0x49	; 73
     84e:	49 e4       	ldi	r20, 0x49	; 73
     850:	59 e4       	ldi	r21, 0x49	; 73
     852:	61 e4       	ldi	r22, 0x41	; 65
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     85e:	33 c1       	rjmp	.+614    	; 0xac6 <__stack+0x267>
			case 'Q': case 'q': GlCD_voidSpecialChar(GLCD_CHAR_Q); break;
     860:	2e e1       	ldi	r18, 0x1E	; 30
     862:	31 e2       	ldi	r19, 0x21	; 33
     864:	41 e3       	ldi	r20, 0x31	; 49
     866:	5e e3       	ldi	r21, 0x3E	; 62
     868:	60 e4       	ldi	r22, 0x40	; 64
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     874:	28 c1       	rjmp	.+592    	; 0xac6 <__stack+0x267>
			case 'U': case 'u': GlCD_voidSpecialChar(GLCD_CHAR_U); break;
     876:	2f e3       	ldi	r18, 0x3F	; 63
     878:	30 e4       	ldi	r19, 0x40	; 64
     87a:	40 e4       	ldi	r20, 0x40	; 64
     87c:	50 e4       	ldi	r21, 0x40	; 64
     87e:	6f e3       	ldi	r22, 0x3F	; 63
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     88a:	1d c1       	rjmp	.+570    	; 0xac6 <__stack+0x267>
			case 'N': case 'n': GlCD_voidSpecialChar(GLCD_CHAR_N); break;
     88c:	2f e7       	ldi	r18, 0x7F	; 127
     88e:	32 e0       	ldi	r19, 0x02	; 2
     890:	4c e1       	ldi	r20, 0x1C	; 28
     892:	50 e2       	ldi	r21, 0x20	; 32
     894:	6f e7       	ldi	r22, 0x7F	; 127
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     8a0:	12 c1       	rjmp	.+548    	; 0xac6 <__stack+0x267>
			case 'C': case 'c': GlCD_voidSpecialChar(GLCD_CHAR_C); break;
     8a2:	2e e3       	ldi	r18, 0x3E	; 62
     8a4:	31 e4       	ldi	r19, 0x41	; 65
     8a6:	41 e4       	ldi	r20, 0x41	; 65
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	61 e4       	ldi	r22, 0x41	; 65
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     8b6:	07 c1       	rjmp	.+526    	; 0xac6 <__stack+0x267>
			case 'Y': case 'y': GlCD_voidSpecialChar(GLCD_CHAR_Y); break;
     8b8:	23 e0       	ldi	r18, 0x03	; 3
     8ba:	3c e0       	ldi	r19, 0x0C	; 12
     8bc:	40 e7       	ldi	r20, 0x70	; 112
     8be:	5c e0       	ldi	r21, 0x0C	; 12
     8c0:	63 e0       	ldi	r22, 0x03	; 3
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     8cc:	fc c0       	rjmp	.+504    	; 0xac6 <__stack+0x267>
			case 'D': case 'd': GlCD_voidSpecialChar(GLCD_CHAR_D); break;
     8ce:	2f e7       	ldi	r18, 0x7F	; 127
     8d0:	31 e4       	ldi	r19, 0x41	; 65
     8d2:	41 e4       	ldi	r20, 0x41	; 65
     8d4:	5e e3       	ldi	r21, 0x3E	; 62
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     8e2:	f1 c0       	rjmp	.+482    	; 0xac6 <__stack+0x267>
			case 'T': case 't': GlCD_voidSpecialChar(GLCD_CHAR_T); break;
     8e4:	21 e0       	ldi	r18, 0x01	; 1
     8e6:	31 e0       	ldi	r19, 0x01	; 1
     8e8:	4f e7       	ldi	r20, 0x7F	; 127
     8ea:	51 e0       	ldi	r21, 0x01	; 1
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     8f8:	e6 c0       	rjmp	.+460    	; 0xac6 <__stack+0x267>
			case 'K': case 'k': GlCD_voidSpecialChar(GLCD_CHAR_K); break;
     8fa:	2f e7       	ldi	r18, 0x7F	; 127
     8fc:	38 e0       	ldi	r19, 0x08	; 8
     8fe:	44 e1       	ldi	r20, 0x14	; 20
     900:	52 e2       	ldi	r21, 0x22	; 34
     902:	61 e4       	ldi	r22, 0x41	; 65
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     90e:	db c0       	rjmp	.+438    	; 0xac6 <__stack+0x267>
			case 'H': case 'h': GlCD_voidSpecialChar(GLCD_CHAR_H); break;
     910:	2f e7       	ldi	r18, 0x7F	; 127
     912:	38 e0       	ldi	r19, 0x08	; 8
     914:	48 e0       	ldi	r20, 0x08	; 8
     916:	58 e0       	ldi	r21, 0x08	; 8
     918:	6f e7       	ldi	r22, 0x7F	; 127
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     924:	d0 c0       	rjmp	.+416    	; 0xac6 <__stack+0x267>
			case 'Z': case 'z': GlCD_voidSpecialChar(GLCD_CHAR_Z); break;
     926:	21 e6       	ldi	r18, 0x61	; 97
     928:	31 e5       	ldi	r19, 0x51	; 81
     92a:	49 e4       	ldi	r20, 0x49	; 73
     92c:	55 e4       	ldi	r21, 0x45	; 69
     92e:	63 e4       	ldi	r22, 0x43	; 67
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     93a:	c5 c0       	rjmp	.+394    	; 0xac6 <__stack+0x267>
			case 'M': case 'm': GlCD_voidSpecialChar(GLCD_CHAR_M); break;
     93c:	2f e7       	ldi	r18, 0x7F	; 127
     93e:	32 e0       	ldi	r19, 0x02	; 2
     940:	4c e0       	ldi	r20, 0x0C	; 12
     942:	52 e0       	ldi	r21, 0x02	; 2
     944:	6f e7       	ldi	r22, 0x7F	; 127
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     950:	ba c0       	rjmp	.+372    	; 0xac6 <__stack+0x267>
			case 'S': case 's': GlCD_voidSpecialChar(GLCD_CHAR_S); break;
     952:	2f e4       	ldi	r18, 0x4F	; 79
     954:	39 e4       	ldi	r19, 0x49	; 73
     956:	49 e4       	ldi	r20, 0x49	; 73
     958:	59 e4       	ldi	r21, 0x49	; 73
     95a:	69 ef       	ldi	r22, 0xF9	; 249
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     966:	af c0       	rjmp	.+350    	; 0xac6 <__stack+0x267>
			case 'I': case 'i': GlCD_voidSpecialChar(GLCD_CHAR_I); break;
     968:	21 e4       	ldi	r18, 0x41	; 65
     96a:	31 e4       	ldi	r19, 0x41	; 65
     96c:	4f e7       	ldi	r20, 0x7F	; 127
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	61 e4       	ldi	r22, 0x41	; 65
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     97c:	a4 c0       	rjmp	.+328    	; 0xac6 <__stack+0x267>
			case '%': GlCD_voidSpecialChar(GLCD_CHAR_PERCENT); break;
     97e:	23 ec       	ldi	r18, 0xC3	; 195
     980:	33 e7       	ldi	r19, 0x73	; 115
     982:	48 e1       	ldi	r20, 0x18	; 24
     984:	5e ec       	ldi	r21, 0xCE	; 206
     986:	63 ec       	ldi	r22, 0xC3	; 195
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     992:	99 c0       	rjmp	.+306    	; 0xac6 <__stack+0x267>
			case '=': GlCD_voidSpecialChar(GLCD_CHAR_EQUAL); break;
     994:	24 e2       	ldi	r18, 0x24	; 36
     996:	34 e2       	ldi	r19, 0x24	; 36
     998:	44 e2       	ldi	r20, 0x24	; 36
     99a:	54 e2       	ldi	r21, 0x24	; 36
     99c:	64 e2       	ldi	r22, 0x24	; 36
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     9a8:	8e c0       	rjmp	.+284    	; 0xac6 <__stack+0x267>
			case '.': GlCD_voidSpecialChar(GLCD_CHAR_POINT); break;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e7       	ldi	r19, 0x70	; 112
     9ae:	40 e7       	ldi	r20, 0x70	; 112
     9b0:	50 e7       	ldi	r21, 0x70	; 112
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     9be:	83 c0       	rjmp	.+262    	; 0xac6 <__stack+0x267>
			case ' ': GlCD_voidSpecialChar(GLCD_CHAR_SPACE); break;
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     9d4:	78 c0       	rjmp	.+240    	; 0xac6 <__stack+0x267>
			case '-': GlCD_voidSpecialChar(GLCD_CHAR_NEGATIVE); break;
     9d6:	28 e1       	ldi	r18, 0x18	; 24
     9d8:	38 e1       	ldi	r19, 0x18	; 24
     9da:	48 e1       	ldi	r20, 0x18	; 24
     9dc:	58 e1       	ldi	r21, 0x18	; 24
     9de:	68 e1       	ldi	r22, 0x18	; 24
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     9ea:	6d c0       	rjmp	.+218    	; 0xac6 <__stack+0x267>
			case '0': GlCD_voidSpecialChar(GLCD_CHAR_0); break;
     9ec:	2e e3       	ldi	r18, 0x3E	; 62
     9ee:	31 e5       	ldi	r19, 0x51	; 81
     9f0:	49 e4       	ldi	r20, 0x49	; 73
     9f2:	55 e4       	ldi	r21, 0x45	; 69
     9f4:	6e e3       	ldi	r22, 0x3E	; 62
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a00:	62 c0       	rjmp	.+196    	; 0xac6 <__stack+0x267>
			case '1': GlCD_voidSpecialChar(GLCD_CHAR_1); break;
     a02:	24 e4       	ldi	r18, 0x44	; 68
     a04:	32 e4       	ldi	r19, 0x42	; 66
     a06:	4f e7       	ldi	r20, 0x7F	; 127
     a08:	50 e4       	ldi	r21, 0x40	; 64
     a0a:	60 e4       	ldi	r22, 0x40	; 64
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a16:	57 c0       	rjmp	.+174    	; 0xac6 <__stack+0x267>
			case '2': GlCD_voidSpecialChar(GLCD_CHAR_2); break;
     a18:	26 e4       	ldi	r18, 0x46	; 70
     a1a:	31 e6       	ldi	r19, 0x61	; 97
     a1c:	41 e5       	ldi	r20, 0x51	; 81
     a1e:	5e e4       	ldi	r21, 0x4E	; 78
     a20:	60 e4       	ldi	r22, 0x40	; 64
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a2c:	4c c0       	rjmp	.+152    	; 0xac6 <__stack+0x267>
			case '3': GlCD_voidSpecialChar(GLCD_CHAR_3); break;
     a2e:	21 e4       	ldi	r18, 0x41	; 65
     a30:	39 e4       	ldi	r19, 0x49	; 73
     a32:	49 e4       	ldi	r20, 0x49	; 73
     a34:	59 e4       	ldi	r21, 0x49	; 73
     a36:	66 e3       	ldi	r22, 0x36	; 54
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a42:	41 c0       	rjmp	.+130    	; 0xac6 <__stack+0x267>
			case '4': GlCD_voidSpecialChar(GLCD_CHAR_4); break;
     a44:	28 e1       	ldi	r18, 0x18	; 24
     a46:	34 e1       	ldi	r19, 0x14	; 20
     a48:	42 e1       	ldi	r20, 0x12	; 18
     a4a:	5f e7       	ldi	r21, 0x7F	; 127
     a4c:	60 e1       	ldi	r22, 0x10	; 16
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a58:	36 c0       	rjmp	.+108    	; 0xac6 <__stack+0x267>
			case '5': GlCD_voidSpecialChar(GLCD_CHAR_5); break;
     a5a:	2f e4       	ldi	r18, 0x4F	; 79
     a5c:	39 e4       	ldi	r19, 0x49	; 73
     a5e:	49 e4       	ldi	r20, 0x49	; 73
     a60:	51 e5       	ldi	r21, 0x51	; 81
     a62:	61 e2       	ldi	r22, 0x21	; 33
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a6e:	2b c0       	rjmp	.+86     	; 0xac6 <__stack+0x267>
			case '6': GlCD_voidSpecialChar(GLCD_CHAR_6); break;
     a70:	2c e7       	ldi	r18, 0x7C	; 124
     a72:	3a e4       	ldi	r19, 0x4A	; 74
     a74:	49 e4       	ldi	r20, 0x49	; 73
     a76:	59 e4       	ldi	r21, 0x49	; 73
     a78:	61 e3       	ldi	r22, 0x31	; 49
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a84:	20 c0       	rjmp	.+64     	; 0xac6 <__stack+0x267>
			case '7': GlCD_voidSpecialChar(GLCD_CHAR_7); break;
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	39 e4       	ldi	r19, 0x49	; 73
     a8a:	49 e2       	ldi	r20, 0x29	; 41
     a8c:	59 e1       	ldi	r21, 0x19	; 25
     a8e:	6f e0       	ldi	r22, 0x0F	; 15
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     a9a:	15 c0       	rjmp	.+42     	; 0xac6 <__stack+0x267>
			case '8': GlCD_voidSpecialChar(GLCD_CHAR_8); break;
     a9c:	27 e7       	ldi	r18, 0x77	; 119
     a9e:	39 e4       	ldi	r19, 0x49	; 73
     aa0:	49 e4       	ldi	r20, 0x49	; 73
     aa2:	59 e4       	ldi	r21, 0x49	; 73
     aa4:	67 e7       	ldi	r22, 0x77	; 119
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <__stack+0x267>
			case '9': GlCD_voidSpecialChar(GLCD_CHAR_9); break;
     ab2:	2f e4       	ldi	r18, 0x4F	; 79
     ab4:	39 e4       	ldi	r19, 0x49	; 73
     ab6:	49 e4       	ldi	r20, 0x49	; 73
     ab8:	59 e4       	ldi	r21, 0x49	; 73
     aba:	6f e7       	ldi	r22, 0x7F	; 127
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 93 03 	call	0x726	; 0x726 <GlCD_voidSpecialChar>
			default: break;
		}
		GLCD_voidSetCursor(GLCD_u8CurrentX_address,GLCD_u8CurrentY_address);
     ac6:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <GLCD_u8CurrentX_address>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 75 03 	call	0x6ea	; 0x6ea <GLCD_voidSetCursor>
		GLCD_voidData(0);
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <GLCD_voidData>
		GLCD_u8CurrentY_address++;
     adc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <GLCD_u8CurrentY_address>
		if (GLCD_u8CurrentY_address >= 60 && GLCD_u8CurrentPage == 0) {
     ae6:	8c 33       	cpi	r24, 0x3C	; 60
     ae8:	48 f0       	brcs	.+18     	; 0xafc <__stack+0x29d>
     aea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     aee:	81 11       	cpse	r24, r1
     af0:	05 c0       	rjmp	.+10     	; 0xafc <__stack+0x29d>
			GLCD_voidSelectPage(GLCD_PAGE_1);
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
			GLCD_u8CurrentY_address = 0;
     af8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <GLCD_u8CurrentY_address>
	}
		if(GLCD_u8CurrentY_address>=60 && GLCD_u8CurrentPage == 1){
     afc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <GLCD_u8CurrentY_address>
     b00:	8c 33       	cpi	r24, 0x3C	; 60
     b02:	68 f0       	brcs	.+26     	; 0xb1e <__stack+0x2bf>
     b04:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	49 f4       	brne	.+18     	; 0xb1e <__stack+0x2bf>
			GLCD_voidSelectPage(GLCD_PAGE_0);
     b0c:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
			GLCD_u8CurrentX_address++;
     b10:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <GLCD_u8CurrentX_address>
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <GLCD_u8CurrentX_address>
			GlCD_voidGoToLine(GLCD_u8CurrentX_address);
     b1a:	0e 94 82 03 	call	0x704	; 0x704 <GlCD_voidGoToLine>
     b1e:	08 95       	ret

00000b20 <GLCD_voidString>:
		}
}


void GLCD_voidString(u8 *copy_pu8String){
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
	
	if(copy_pu8String!=NULL)
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	29 f4       	brne	.+10     	; 0xb34 <GLCD_voidString+0x14>
     b2a:	0c c0       	rjmp	.+24     	; 0xb44 <GLCD_voidString+0x24>
	{
		u8 local_u8counter=0;
		while(copy_pu8String[local_u8counter]!='\0')
		{
			GLCD_voidChar(copy_pu8String[local_u8counter]);
     b2c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <GLCD_voidChar>
			local_u8counter++;
     b30:	cf 5f       	subi	r28, 0xFF	; 255
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <GLCD_voidString+0x18>
     b34:	8c 01       	movw	r16, r24
     b36:	c0 e0       	ldi	r28, 0x00	; 0
void GLCD_voidString(u8 *copy_pu8String){
	
	if(copy_pu8String!=NULL)
	{
		u8 local_u8counter=0;
		while(copy_pu8String[local_u8counter]!='\0')
     b38:	f8 01       	movw	r30, r16
     b3a:	ec 0f       	add	r30, r28
     b3c:	f1 1d       	adc	r31, r1
     b3e:	80 81       	ld	r24, Z
     b40:	81 11       	cpse	r24, r1
     b42:	f4 cf       	rjmp	.-24     	; 0xb2c <GLCD_voidString+0xc>
	}
	else
	{
		// return Error state
	}
	}
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <GLCD_voidClearDisplay>:
		GLCD_voidSetCursor(copy_u8Line,0);
		GLCD_u8CurrentY_address = 0;
	}
	
}
void GLCD_voidClearDisplay(void){
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	GLCD_voidSelectPage(GLCD_BOTH_PAGES);
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
	for(u8 i=0;i<8;i++){
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	0f c0       	rjmp	.+30     	; 0xb78 <GLCD_voidClearDisplay+0x2c>
		for(u8 j=0;j<60;j++){
			GLCD_voidSetCursor(i,j);
     b5a:	6c 2f       	mov	r22, r28
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	8d 2f       	mov	r24, r29
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 75 03 	call	0x6ea	; 0x6ea <GLCD_voidSetCursor>
			GLCD_voidData(0);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <GLCD_voidData>
	
}
void GLCD_voidClearDisplay(void){
	GLCD_voidSelectPage(GLCD_BOTH_PAGES);
	for(u8 i=0;i<8;i++){
		for(u8 j=0;j<60;j++){
     b6c:	cf 5f       	subi	r28, 0xFF	; 255
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <GLCD_voidClearDisplay+0x26>
     b70:	c0 e0       	ldi	r28, 0x00	; 0
     b72:	cc 33       	cpi	r28, 0x3C	; 60
     b74:	90 f3       	brcs	.-28     	; 0xb5a <GLCD_voidClearDisplay+0xe>
	}
	
}
void GLCD_voidClearDisplay(void){
	GLCD_voidSelectPage(GLCD_BOTH_PAGES);
	for(u8 i=0;i<8;i++){
     b76:	df 5f       	subi	r29, 0xFF	; 255
     b78:	d8 30       	cpi	r29, 0x08	; 8
     b7a:	d0 f3       	brcs	.-12     	; 0xb70 <GLCD_voidClearDisplay+0x24>
		for(u8 j=0;j<60;j++){
			GLCD_voidSetCursor(i,j);
			GLCD_voidData(0);
		}
	}
	GLCD_voidSelectPage(GLCD_PAGE_0);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 c1 02 	call	0x582	; 0x582 <GLCD_voidSelectPage>
	GLCD_voidSetCursor(0,0);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 75 03 	call	0x6ea	; 0x6ea <GLCD_voidSetCursor>
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <GLCD_voidInteger>:
	Local_f32decimal *= 10.0;
	u8 local_u8first_digit = (u8)Local_f32decimal;      // First decimal digit
	GLCD_voidInteger(local_u8first_digit);
	Local_f32decimal = Local_f32decimal - local_u8first_digit;}
}
void GLCD_voidInteger(u16 copy_u16Integer){
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <GLCD_voidInteger+0xa>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <GLCD_voidInteger+0xc>
     ba0:	1f 92       	push	r1
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	ac 01       	movw	r20, r24
	if (copy_u16Integer < 0) {
		GLCD_voidChar('-');
		copy_u16Integer = -1 * copy_u16Integer;
	}
	char str_reversed[5];
	char* str_ptr = str_reversed;
     ba8:	fe 01       	movw	r30, r28
     baa:	31 96       	adiw	r30, 0x01	; 1

	// Extract digits and store them in reverse order
	do {
		*str_ptr++ = (copy_u16Integer % 10) + '0'; // Convert digit to ASCII
     bac:	8f 01       	movw	r16, r30
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	9a 01       	movw	r18, r20
     bb4:	ad ec       	ldi	r26, 0xCD	; 205
     bb6:	bc ec       	ldi	r27, 0xCC	; 204
     bb8:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	96 95       	lsr	r25
     bc2:	87 95       	ror	r24
     bc4:	96 95       	lsr	r25
     bc6:	87 95       	ror	r24
     bc8:	9c 01       	movw	r18, r24
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	82 0f       	add	r24, r18
     bdc:	93 1f       	adc	r25, r19
     bde:	9a 01       	movw	r18, r20
     be0:	28 1b       	sub	r18, r24
     be2:	39 0b       	sbc	r19, r25
     be4:	c9 01       	movw	r24, r18
     be6:	80 5d       	subi	r24, 0xD0	; 208
     be8:	80 83       	st	Z, r24
		copy_u16Integer /= 10;
     bea:	9a 01       	movw	r18, r20
     bec:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
     bf0:	ac 01       	movw	r20, r24
     bf2:	56 95       	lsr	r21
     bf4:	47 95       	ror	r20
     bf6:	56 95       	lsr	r21
     bf8:	47 95       	ror	r20
     bfa:	56 95       	lsr	r21
     bfc:	47 95       	ror	r20
	char str_reversed[5];
	char* str_ptr = str_reversed;

	// Extract digits and store them in reverse order
	do {
		*str_ptr++ = (copy_u16Integer % 10) + '0'; // Convert digit to ASCII
     bfe:	f8 01       	movw	r30, r16
		copy_u16Integer /= 10;
	} while (copy_u16Integer > 0);
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	99 f6       	brne	.-90     	; 0xbac <GLCD_voidInteger+0x18>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <GLCD_voidInteger+0x7e>

	// Display characters in reverse
	while (str_ptr != str_reversed) {
		GLCD_voidChar(*--str_ptr);
     c08:	f8 01       	movw	r30, r16
     c0a:	82 91       	ld	r24, -Z
     c0c:	8f 01       	movw	r16, r30
     c0e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <GLCD_voidChar>
		*str_ptr++ = (copy_u16Integer % 10) + '0'; // Convert digit to ASCII
		copy_u16Integer /= 10;
	} while (copy_u16Integer > 0);

	// Display characters in reverse
	while (str_ptr != str_reversed) {
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	80 17       	cp	r24, r16
     c18:	91 07       	cpc	r25, r17
     c1a:	b1 f7       	brne	.-20     	; 0xc08 <GLCD_voidInteger+0x74>
		GLCD_voidChar(*--str_ptr);
	}

}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	08 95       	ret

00000c30 <GLCD_voidFloat>:
		}
	}
	GLCD_voidSelectPage(GLCD_PAGE_0);
	GLCD_voidSetCursor(0,0);
}
void GLCD_voidFloat(f32 copy_f32Float){
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	6b 01       	movw	r12, r22
     c40:	7c 01       	movw	r14, r24
	u8 local_u8integer = (u8)copy_f32Float;
     c42:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
     c46:	c6 2f       	mov	r28, r22
	GLCD_voidInteger(local_u8integer);
     c48:	86 2f       	mov	r24, r22
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 ca 05 	call	0xb94	; 0xb94 <GLCD_voidInteger>
	GLCD_voidChar('.');
     c50:	8e e2       	ldi	r24, 0x2E	; 46
     c52:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <GLCD_voidChar>
	f32 Local_f32decimal = copy_f32Float - (f32)local_u8integer;
     c56:	6c 2f       	mov	r22, r28
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 43 0a 	call	0x1486	; 0x1486 <__floatunsisf>
     c62:	9b 01       	movw	r18, r22
     c64:	ac 01       	movw	r20, r24
     c66:	c7 01       	movw	r24, r14
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 35 09 	call	0x126a	; 0x126a <__subsf3>
	for(u8 i = 0;i < 3;i++){
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	1c c0       	rjmp	.+56     	; 0xcaa <GLCD_voidFloat+0x7a>
	// Extract the first two decimal digits and display them
	Local_f32decimal *= 10.0;
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e2       	ldi	r20, 0x20	; 32
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
     c7e:	6b 01       	movw	r12, r22
     c80:	7c 01       	movw	r14, r24
	u8 local_u8first_digit = (u8)Local_f32decimal;      // First decimal digit
     c82:	0e 94 14 0a 	call	0x1428	; 0x1428 <__fixunssfsi>
	GLCD_voidInteger(local_u8first_digit);
     c86:	c6 2f       	mov	r28, r22
     c88:	d0 e0       	ldi	r29, 0x00	; 0
     c8a:	ce 01       	movw	r24, r28
     c8c:	0e 94 ca 05 	call	0xb94	; 0xb94 <GLCD_voidInteger>
	Local_f32decimal = Local_f32decimal - local_u8first_digit;}
     c90:	be 01       	movw	r22, r28
     c92:	dd 0f       	add	r29, r29
     c94:	88 0b       	sbc	r24, r24
     c96:	99 0b       	sbc	r25, r25
     c98:	0e 94 45 0a 	call	0x148a	; 0x148a <__floatsisf>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c7 01       	movw	r24, r14
     ca2:	b6 01       	movw	r22, r12
     ca4:	0e 94 35 09 	call	0x126a	; 0x126a <__subsf3>
void GLCD_voidFloat(f32 copy_f32Float){
	u8 local_u8integer = (u8)copy_f32Float;
	GLCD_voidInteger(local_u8integer);
	GLCD_voidChar('.');
	f32 Local_f32decimal = copy_f32Float - (f32)local_u8integer;
	for(u8 i = 0;i < 3;i++){
     ca8:	1f 5f       	subi	r17, 0xFF	; 255
     caa:	13 30       	cpi	r17, 0x03	; 3
     cac:	10 f3       	brcs	.-60     	; 0xc72 <GLCD_voidFloat+0x42>
	// Extract the first two decimal digits and display them
	Local_f32decimal *= 10.0;
	u8 local_u8first_digit = (u8)Local_f32decimal;      // First decimal digit
	GLCD_voidInteger(local_u8first_digit);
	Local_f32decimal = Local_f32decimal - local_u8first_digit;}
}
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <main>:
#include "GLCD_interface.h"
#include "ICU_interface.h"
#include "PWM_interface.h"

int main(void)
{
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	61 97       	sbiw	r28, 0x11	; 17
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
	 PWM_Drawer_voidinit();
     cd2:	0e 94 a4 00 	call	0x148	; 0x148 <PWM_Drawer_voidinit>
	 PWM_Drawer_SignalData Signal_Data = {0, 0, 0, 0, 0};
     cd6:	fe 01       	movw	r30, r28
     cd8:	31 96       	adiw	r30, 0x01	; 1
     cda:	81 e1       	ldi	r24, 0x11	; 17
     cdc:	df 01       	movw	r26, r30
     cde:	1d 92       	st	X+, r1
     ce0:	8a 95       	dec	r24
     ce2:	e9 f7       	brne	.-6      	; 0xcde <main+0x20>
	 f32 Scale_ms = 0;

    while (1) 
    {
		PWM_Drawer_voidMeasureSignal(&Signal_Data);
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	0e 94 b3 00 	call	0x166	; 0x166 <PWM_Drawer_voidMeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms)/3;
     cec:	6a 85       	ldd	r22, Y+10	; 0x0a
     cee:	7b 85       	ldd	r23, Y+11	; 0x0b
     cf0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e4       	ldi	r20, 0x40	; 64
     cfa:	50 e4       	ldi	r21, 0x40	; 64
     cfc:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
     d00:	ab 01       	movw	r20, r22
     d02:	bc 01       	movw	r22, r24
		PWM_Drawer_voidDraw(&Signal_Data, Scale_ms);
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	0e 94 22 01 	call	0x244	; 0x244 <PWM_Drawer_voidDraw>
     d0c:	bf ef       	ldi	r27, 0xFF	; 255
     d0e:	23 ed       	ldi	r18, 0xD3	; 211
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	b1 50       	subi	r27, 0x01	; 1
     d14:	20 40       	sbci	r18, 0x00	; 0
     d16:	80 40       	sbci	r24, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <main+0x54>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <main+0x5e>
     d1c:	00 00       	nop
     d1e:	e2 cf       	rjmp	.-60     	; 0xce4 <main+0x26>

00000d20 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	switch(copy_u8PortId)
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	19 f1       	breq	.+70     	; 0xd6a <DIO_voidSetPinDirection+0x4a>
     d24:	30 f0       	brcs	.+12     	; 0xd32 <DIO_voidSetPinDirection+0x12>
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	e1 f1       	breq	.+120    	; 0xda2 <DIO_voidSetPinDirection+0x82>
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	09 f4       	brne	.+2      	; 0xd30 <DIO_voidSetPinDirection+0x10>
     d2e:	55 c0       	rjmp	.+170    	; 0xdda <DIO_voidSetPinDirection+0xba>
     d30:	08 95       	ret
	{
		case DIO_PORTA:
		switch(copy_u8PinDirection)
     d32:	44 23       	and	r20, r20
     d34:	19 f0       	breq	.+6      	; 0xd3c <DIO_voidSetPinDirection+0x1c>
     d36:	41 30       	cpi	r20, 0x01	; 1
     d38:	69 f0       	breq	.+26     	; 0xd54 <DIO_voidSetPinDirection+0x34>
     d3a:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRA_REG, copy_u8PinId);
     d3c:	2a b3       	in	r18, 0x1a	; 26
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_voidSetPinDirection+0x28>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	6a 95       	dec	r22
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_voidSetPinDirection+0x24>
     d4c:	80 95       	com	r24
     d4e:	82 23       	and	r24, r18
     d50:	8a bb       	out	0x1a, r24	; 26
			break;
     d52:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRA_REG, copy_u8PinId);
     d54:	2a b3       	in	r18, 0x1a	; 26
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_voidSetPinDirection+0x40>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	6a 95       	dec	r22
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_voidSetPinDirection+0x3c>
     d64:	82 2b       	or	r24, r18
     d66:	8a bb       	out	0x1a, r24	; 26
			break;
     d68:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		switch(copy_u8PinDirection)
     d6a:	44 23       	and	r20, r20
     d6c:	19 f0       	breq	.+6      	; 0xd74 <DIO_voidSetPinDirection+0x54>
     d6e:	41 30       	cpi	r20, 0x01	; 1
     d70:	69 f0       	breq	.+26     	; 0xd8c <DIO_voidSetPinDirection+0x6c>
     d72:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRB_REG, copy_u8PinId);
     d74:	27 b3       	in	r18, 0x17	; 23
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_voidSetPinDirection+0x60>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	6a 95       	dec	r22
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_voidSetPinDirection+0x5c>
     d84:	80 95       	com	r24
     d86:	82 23       	and	r24, r18
     d88:	87 bb       	out	0x17, r24	; 23
			break;
     d8a:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRB_REG, copy_u8PinId);
     d8c:	27 b3       	in	r18, 0x17	; 23
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_voidSetPinDirection+0x78>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	6a 95       	dec	r22
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_voidSetPinDirection+0x74>
     d9c:	82 2b       	or	r24, r18
     d9e:	87 bb       	out	0x17, r24	; 23
			break;
     da0:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		switch(copy_u8PinDirection)
     da2:	44 23       	and	r20, r20
     da4:	19 f0       	breq	.+6      	; 0xdac <DIO_voidSetPinDirection+0x8c>
     da6:	41 30       	cpi	r20, 0x01	; 1
     da8:	69 f0       	breq	.+26     	; 0xdc4 <DIO_voidSetPinDirection+0xa4>
     daa:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRC_REG, copy_u8PinId);
     dac:	24 b3       	in	r18, 0x14	; 20
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_voidSetPinDirection+0x98>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	6a 95       	dec	r22
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_voidSetPinDirection+0x94>
     dbc:	80 95       	com	r24
     dbe:	82 23       	and	r24, r18
     dc0:	84 bb       	out	0x14, r24	; 20
			break;
     dc2:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRC_REG, copy_u8PinId);
     dc4:	24 b3       	in	r18, 0x14	; 20
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_voidSetPinDirection+0xb0>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	6a 95       	dec	r22
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_voidSetPinDirection+0xac>
     dd4:	82 2b       	or	r24, r18
     dd6:	84 bb       	out	0x14, r24	; 20
			break;
     dd8:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		switch(copy_u8PinDirection)
     dda:	44 23       	and	r20, r20
     ddc:	19 f0       	breq	.+6      	; 0xde4 <DIO_voidSetPinDirection+0xc4>
     dde:	41 30       	cpi	r20, 0x01	; 1
     de0:	69 f0       	breq	.+26     	; 0xdfc <DIO_voidSetPinDirection+0xdc>
     de2:	08 95       	ret
		{
			case DIO_PIN_INPUT:
			CLR_BIT(DDRD_REG, copy_u8PinId);
     de4:	21 b3       	in	r18, 0x11	; 17
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_voidSetPinDirection+0xd0>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	6a 95       	dec	r22
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_voidSetPinDirection+0xcc>
     df4:	80 95       	com	r24
     df6:	82 23       	and	r24, r18
     df8:	81 bb       	out	0x11, r24	; 17
			break;
     dfa:	08 95       	ret
			
			case DIO_PIN_OUTPUT:
			SET_BIT(DDRD_REG, copy_u8PinId);
     dfc:	21 b3       	in	r18, 0x11	; 17
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_voidSetPinDirection+0xe8>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	6a 95       	dec	r22
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_voidSetPinDirection+0xe4>
     e0c:	82 2b       	or	r24, r18
     e0e:	81 bb       	out	0x11, r24	; 17
     e10:	08 95       	ret

00000e12 <DIO_voidSetPinValue>:
}


void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	switch(copy_u8PortId)
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	19 f1       	breq	.+70     	; 0xe5c <DIO_voidSetPinValue+0x4a>
     e16:	30 f0       	brcs	.+12     	; 0xe24 <DIO_voidSetPinValue+0x12>
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	e1 f1       	breq	.+120    	; 0xe94 <DIO_voidSetPinValue+0x82>
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	09 f4       	brne	.+2      	; 0xe22 <DIO_voidSetPinValue+0x10>
     e20:	55 c0       	rjmp	.+170    	; 0xecc <DIO_voidSetPinValue+0xba>
     e22:	08 95       	ret
	{
		case DIO_PORTA:
		switch(copy_u8PinValue)
     e24:	44 23       	and	r20, r20
     e26:	19 f0       	breq	.+6      	; 0xe2e <DIO_voidSetPinValue+0x1c>
     e28:	41 30       	cpi	r20, 0x01	; 1
     e2a:	69 f0       	breq	.+26     	; 0xe46 <DIO_voidSetPinValue+0x34>
     e2c:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTA_REG, copy_u8PinId);
     e2e:	2b b3       	in	r18, 0x1b	; 27
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_voidSetPinValue+0x28>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	6a 95       	dec	r22
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_voidSetPinValue+0x24>
     e3e:	80 95       	com	r24
     e40:	82 23       	and	r24, r18
     e42:	8b bb       	out	0x1b, r24	; 27
			break;
     e44:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTA_REG, copy_u8PinId);
     e46:	2b b3       	in	r18, 0x1b	; 27
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_voidSetPinValue+0x40>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_voidSetPinValue+0x3c>
     e56:	82 2b       	or	r24, r18
     e58:	8b bb       	out	0x1b, r24	; 27
			break;
     e5a:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		switch(copy_u8PinValue)
     e5c:	44 23       	and	r20, r20
     e5e:	19 f0       	breq	.+6      	; 0xe66 <DIO_voidSetPinValue+0x54>
     e60:	41 30       	cpi	r20, 0x01	; 1
     e62:	69 f0       	breq	.+26     	; 0xe7e <DIO_voidSetPinValue+0x6c>
     e64:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTB_REG, copy_u8PinId);
     e66:	28 b3       	in	r18, 0x18	; 24
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_voidSetPinValue+0x60>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_voidSetPinValue+0x5c>
     e76:	80 95       	com	r24
     e78:	82 23       	and	r24, r18
     e7a:	88 bb       	out	0x18, r24	; 24
			break;
     e7c:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTB_REG, copy_u8PinId);
     e7e:	28 b3       	in	r18, 0x18	; 24
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinValue+0x78>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	6a 95       	dec	r22
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinValue+0x74>
     e8e:	82 2b       	or	r24, r18
     e90:	88 bb       	out	0x18, r24	; 24
			break;
     e92:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		switch(copy_u8PinValue)
     e94:	44 23       	and	r20, r20
     e96:	19 f0       	breq	.+6      	; 0xe9e <DIO_voidSetPinValue+0x8c>
     e98:	41 30       	cpi	r20, 0x01	; 1
     e9a:	69 f0       	breq	.+26     	; 0xeb6 <DIO_voidSetPinValue+0xa4>
     e9c:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTC_REG, copy_u8PinId);
     e9e:	25 b3       	in	r18, 0x15	; 21
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinValue+0x98>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	6a 95       	dec	r22
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinValue+0x94>
     eae:	80 95       	com	r24
     eb0:	82 23       	and	r24, r18
     eb2:	85 bb       	out	0x15, r24	; 21
			break;
     eb4:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTC_REG, copy_u8PinId);
     eb6:	25 b3       	in	r18, 0x15	; 21
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_voidSetPinValue+0xb0>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	6a 95       	dec	r22
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_voidSetPinValue+0xac>
     ec6:	82 2b       	or	r24, r18
     ec8:	85 bb       	out	0x15, r24	; 21
			break;
     eca:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		switch(copy_u8PinValue)
     ecc:	44 23       	and	r20, r20
     ece:	19 f0       	breq	.+6      	; 0xed6 <DIO_voidSetPinValue+0xc4>
     ed0:	41 30       	cpi	r20, 0x01	; 1
     ed2:	69 f0       	breq	.+26     	; 0xeee <DIO_voidSetPinValue+0xdc>
     ed4:	08 95       	ret
		{
			case DIO_PIN_LOW:
			CLR_BIT(PORTD_REG, copy_u8PinId);
     ed6:	22 b3       	in	r18, 0x12	; 18
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_voidSetPinValue+0xd0>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	6a 95       	dec	r22
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_voidSetPinValue+0xcc>
     ee6:	80 95       	com	r24
     ee8:	82 23       	and	r24, r18
     eea:	82 bb       	out	0x12, r24	; 18
			break;
     eec:	08 95       	ret
			
			case DIO_PIN_HIGH:
			SET_BIT(PORTD_REG, copy_u8PinId);
     eee:	22 b3       	in	r18, 0x12	; 18
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0xe8>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	6a 95       	dec	r22
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0xe4>
     efe:	82 2b       	or	r24, r18
     f00:	82 bb       	out	0x12, r24	; 18
     f02:	08 95       	ret

00000f04 <ICU_voidinit>:
		CLR_BIT(TCCR1B_REG,ICES1);
		break;
	}
}
void ICU_voidClearTimerReg(void){
	TCNT1_u16_REG =0x0000;
     f04:	cf 93       	push	r28
     f06:	c8 2f       	mov	r28, r24
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	66 e0       	ldi	r22, 0x06	; 6
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
     f12:	1f bc       	out	0x2f, r1	; 47
     f14:	88 b7       	in	r24, 0x38	; 56
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	88 bf       	out	0x38, r24	; 56
     f1a:	8e b5       	in	r24, 0x2e	; 46
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	8e bd       	out	0x2e, r24	; 46
     f20:	c2 30       	cpi	r28, 0x02	; 2
     f22:	99 f0       	breq	.+38     	; 0xf4a <ICU_voidinit+0x46>
     f24:	18 f4       	brcc	.+6      	; 0xf2c <ICU_voidinit+0x28>
     f26:	c1 30       	cpi	r28, 0x01	; 1
     f28:	31 f0       	breq	.+12     	; 0xf36 <ICU_voidinit+0x32>
     f2a:	2c c0       	rjmp	.+88     	; 0xf84 <ICU_voidinit+0x80>
     f2c:	c3 30       	cpi	r28, 0x03	; 3
     f2e:	b9 f0       	breq	.+46     	; 0xf5e <ICU_voidinit+0x5a>
     f30:	c4 30       	cpi	r28, 0x04	; 4
     f32:	f9 f0       	breq	.+62     	; 0xf72 <ICU_voidinit+0x6e>
     f34:	27 c0       	rjmp	.+78     	; 0xf84 <ICU_voidinit+0x80>
     f36:	8e b5       	in	r24, 0x2e	; 46
     f38:	8e 7f       	andi	r24, 0xFE	; 254
     f3a:	8e bd       	out	0x2e, r24	; 46
     f3c:	8e b5       	in	r24, 0x2e	; 46
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	8e bd       	out	0x2e, r24	; 46
     f42:	8e b5       	in	r24, 0x2e	; 46
     f44:	8b 7f       	andi	r24, 0xFB	; 251
     f46:	8e bd       	out	0x2e, r24	; 46
     f48:	1d c0       	rjmp	.+58     	; 0xf84 <ICU_voidinit+0x80>
     f4a:	8e b5       	in	r24, 0x2e	; 46
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8e bd       	out	0x2e, r24	; 46
     f50:	8e b5       	in	r24, 0x2e	; 46
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	8e bd       	out	0x2e, r24	; 46
     f56:	8e b5       	in	r24, 0x2e	; 46
     f58:	8b 7f       	andi	r24, 0xFB	; 251
     f5a:	8e bd       	out	0x2e, r24	; 46
     f5c:	13 c0       	rjmp	.+38     	; 0xf84 <ICU_voidinit+0x80>
     f5e:	8e b5       	in	r24, 0x2e	; 46
     f60:	8e 7f       	andi	r24, 0xFE	; 254
     f62:	8e bd       	out	0x2e, r24	; 46
     f64:	8e b5       	in	r24, 0x2e	; 46
     f66:	8d 7f       	andi	r24, 0xFD	; 253
     f68:	8e bd       	out	0x2e, r24	; 46
     f6a:	8e b5       	in	r24, 0x2e	; 46
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	8e bd       	out	0x2e, r24	; 46
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <ICU_voidinit+0x80>
     f72:	8e b5       	in	r24, 0x2e	; 46
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8e bd       	out	0x2e, r24	; 46
     f78:	8e b5       	in	r24, 0x2e	; 46
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	8e bd       	out	0x2e, r24	; 46
     f7e:	8e b5       	in	r24, 0x2e	; 46
     f80:	84 60       	ori	r24, 0x04	; 4
     f82:	8e bd       	out	0x2e, r24	; 46
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <ICU_voidSetEdge>:
     f88:	88 23       	and	r24, r24
     f8a:	19 f0       	breq	.+6      	; 0xf92 <ICU_voidSetEdge+0xa>
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	29 f0       	breq	.+10     	; 0xf9a <ICU_voidSetEdge+0x12>
     f90:	08 95       	ret
     f92:	8e b5       	in	r24, 0x2e	; 46
     f94:	80 64       	ori	r24, 0x40	; 64
     f96:	8e bd       	out	0x2e, r24	; 46
     f98:	08 95       	ret
     f9a:	8e b5       	in	r24, 0x2e	; 46
     f9c:	8f 7b       	andi	r24, 0xBF	; 191
     f9e:	8e bd       	out	0x2e, r24	; 46
     fa0:	08 95       	ret

00000fa2 <ICU_u16GetValue>:
}
u16 ICU_u16GetValue(u16 *copy_pu16value){
     fa2:	fc 01       	movw	r30, r24
	*copy_pu16value=ICR1_u16_REG;
     fa4:	86 b5       	in	r24, 0x26	; 38
     fa6:	97 b5       	in	r25, 0x27	; 39
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
	return *copy_pu16value;
}
     fac:	08 95       	ret

00000fae <ICU_GetStatus>:
ICU_StatusType ICU_GetStatus(void){
	if (GET_BIT(TIFR_REG,ICF1)==0){
     fae:	08 b6       	in	r0, 0x38	; 56
     fb0:	05 fc       	sbrc	r0, 5
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <ICU_GetStatus+0xa>
		return ICU_Running;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret
	}
	else return ICU_EVENT_CAPTURED;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
	
}
     fba:	08 95       	ret

00000fbc <ICU_voidGetDuty>:
void ICU_voidGetDuty(u8 copy_u8PrescalerValue,ICU_SignalData *copy_pstructDataptr){
     fbc:	8f 92       	push	r8
     fbe:	9f 92       	push	r9
     fc0:	af 92       	push	r10
     fc2:	bf 92       	push	r11
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <ICU_voidGetDuty+0x16>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <ICU_voidGetDuty+0x18>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <ICU_voidGetDuty+0x1a>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	18 2f       	mov	r17, r24
     fdc:	7b 01       	movw	r14, r22
	u16 a =0,b=0,c=0, t=0,h=0;//change
     fde:	1a 82       	std	Y+2, r1	; 0x02
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	1c 82       	std	Y+4, r1	; 0x04
     fe4:	1b 82       	std	Y+3, r1	; 0x03
     fe6:	1e 82       	std	Y+6, r1	; 0x06
     fe8:	1d 82       	std	Y+5, r1	; 0x05
	ICU_voidSetEdge(ICU_RisingEdge);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_voidSetEdge>
	while (ICU_GetStatus() == ICU_Running);
     ff0:	0e 94 d7 07 	call	0xfae	; 0xfae <ICU_GetStatus>
     ff4:	88 23       	and	r24, r24
     ff6:	e1 f3       	breq	.-8      	; 0xff0 <ICU_voidGetDuty+0x34>
	ICU_u16GetValue(&a);  		
     ff8:	ce 01       	movw	r24, r28
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ICU_u16GetValue>
	SET_BIT(TIFR_REG,ICF1);  	
    1000:	88 b7       	in	r24, 0x38	; 56
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	88 bf       	out	0x38, r24	; 56
	
	ICU_voidSetEdge(ICU_FallingEdge);  	
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_voidSetEdge>
	while (ICU_GetStatus() == ICU_Running);
    100c:	0e 94 d7 07 	call	0xfae	; 0xfae <ICU_GetStatus>
    1010:	88 23       	and	r24, r24
    1012:	e1 f3       	breq	.-8      	; 0x100c <ICU_voidGetDuty+0x50>
	ICU_u16GetValue(&b);  		
    1014:	ce 01       	movw	r24, r28
    1016:	03 96       	adiw	r24, 0x03	; 3
    1018:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ICU_u16GetValue>
	SET_BIT(TIFR_REG,ICF1);    
    101c:	88 b7       	in	r24, 0x38	; 56
    101e:	80 62       	ori	r24, 0x20	; 32
    1020:	88 bf       	out	0x38, r24	; 56
	
	ICU_voidSetEdge(ICU_RisingEdge);;  
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_voidSetEdge>
	while (ICU_GetStatus() == ICU_Running);
    1028:	0e 94 d7 07 	call	0xfae	; 0xfae <ICU_GetStatus>
    102c:	88 23       	and	r24, r24
    102e:	e1 f3       	breq	.-8      	; 0x1028 <ICU_voidGetDuty+0x6c>
	ICU_u16GetValue(&c);  		
    1030:	ce 01       	movw	r24, r28
    1032:	05 96       	adiw	r24, 0x05	; 5
    1034:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <ICU_u16GetValue>
	SET_BIT(TIFR_REG,ICF1);    	
    1038:	88 b7       	in	r24, 0x38	; 56
    103a:	80 62       	ori	r24, 0x20	; 32
    103c:	88 bf       	out	0x38, r24	; 56
 	
	 f32 local_f32prescaler = 0;
	 switch(copy_u8PrescalerValue){
    103e:	12 30       	cpi	r17, 0x02	; 2
    1040:	61 f0       	breq	.+24     	; 0x105a <ICU_voidGetDuty+0x9e>
    1042:	18 f4       	brcc	.+6      	; 0x104a <ICU_voidGetDuty+0x8e>
    1044:	11 30       	cpi	r17, 0x01	; 1
    1046:	11 f1       	breq	.+68     	; 0x108c <ICU_voidGetDuty+0xd0>
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <ICU_voidGetDuty+0x96>
    104a:	13 30       	cpi	r17, 0x03	; 3
    104c:	69 f0       	breq	.+26     	; 0x1068 <ICU_voidGetDuty+0xac>
    104e:	14 30       	cpi	r17, 0x04	; 4
    1050:	a1 f0       	breq	.+40     	; 0x107a <ICU_voidGetDuty+0xbe>
	ICU_voidSetEdge(ICU_RisingEdge);;  
	while (ICU_GetStatus() == ICU_Running);
	ICU_u16GetValue(&c);  		
	SET_BIT(TIFR_REG,ICF1);    	
 	
	 f32 local_f32prescaler = 0;
    1052:	81 2c       	mov	r8, r1
    1054:	91 2c       	mov	r9, r1
    1056:	54 01       	movw	r10, r8
    1058:	20 c0       	rjmp	.+64     	; 0x109a <ICU_voidGetDuty+0xde>
	 switch(copy_u8PrescalerValue){
		 case ICU_Prescaler8:
		 local_f32prescaler=0.5;
		 break;
		 case ICU_Prescaler64:
		 local_f32prescaler=4;
    105a:	81 2c       	mov	r8, r1
    105c:	91 2c       	mov	r9, r1
    105e:	54 01       	movw	r10, r8
    1060:	68 94       	set
    1062:	a7 f8       	bld	r10, 7
    1064:	b6 f8       	bld	r11, 6
		 break;
    1066:	19 c0       	rjmp	.+50     	; 0x109a <ICU_voidGetDuty+0xde>
		 case ICU_Prescaler256:
		 local_f32prescaler=16;
    1068:	0f 2e       	mov	r0, r31
    106a:	81 2c       	mov	r8, r1
    106c:	91 2c       	mov	r9, r1
    106e:	f0 e8       	ldi	r31, 0x80	; 128
    1070:	af 2e       	mov	r10, r31
    1072:	f1 e4       	ldi	r31, 0x41	; 65
    1074:	bf 2e       	mov	r11, r31
    1076:	f0 2d       	mov	r31, r0
		 break;
    1078:	10 c0       	rjmp	.+32     	; 0x109a <ICU_voidGetDuty+0xde>
		 case ICU_Prescaler1024:
		 local_f32prescaler=64;
    107a:	0f 2e       	mov	r0, r31
    107c:	81 2c       	mov	r8, r1
    107e:	91 2c       	mov	r9, r1
    1080:	f0 e8       	ldi	r31, 0x80	; 128
    1082:	af 2e       	mov	r10, r31
    1084:	f2 e4       	ldi	r31, 0x42	; 66
    1086:	bf 2e       	mov	r11, r31
    1088:	f0 2d       	mov	r31, r0
		 break;
    108a:	07 c0       	rjmp	.+14     	; 0x109a <ICU_voidGetDuty+0xde>
	SET_BIT(TIFR_REG,ICF1);    	
 	
	 f32 local_f32prescaler = 0;
	 switch(copy_u8PrescalerValue){
		 case ICU_Prescaler8:
		 local_f32prescaler=0.5;
    108c:	0f 2e       	mov	r0, r31
    108e:	81 2c       	mov	r8, r1
    1090:	91 2c       	mov	r9, r1
    1092:	a1 2c       	mov	r10, r1
    1094:	ff e3       	ldi	r31, 0x3F	; 63
    1096:	bf 2e       	mov	r11, r31
    1098:	f0 2d       	mov	r31, r0
		 break;
		 case ICU_Prescaler1024:
		 local_f32prescaler=64;
		 break;
	 }
	h=b-a;
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	6b 81       	ldd	r22, Y+3	; 0x03
    10a0:	7c 81       	ldd	r23, Y+4	; 0x04
    10a2:	68 1b       	sub	r22, r24
    10a4:	79 0b       	sbc	r23, r25
	t=c-a;
    10a6:	0d 81       	ldd	r16, Y+5	; 0x05
    10a8:	1e 81       	ldd	r17, Y+6	; 0x06
    10aa:	08 1b       	sub	r16, r24
    10ac:	19 0b       	sbc	r17, r25
	copy_pstructDataptr->High_Time_ms=(f32)h * local_f32prescaler  * 1000.0 / F_CPU;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 43 0a 	call	0x1486	; 0x1486 <__floatunsisf>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a e7       	ldi	r20, 0x7A	; 122
    10c8:	54 e4       	ldi	r21, 0x44	; 68
    10ca:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	34 e2       	ldi	r19, 0x24	; 36
    10d2:	44 e7       	ldi	r20, 0x74	; 116
    10d4:	5b e4       	ldi	r21, 0x4B	; 75
    10d6:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    10da:	f7 01       	movw	r30, r14
    10dc:	60 83       	st	Z, r22
    10de:	71 83       	std	Z+1, r23	; 0x01
    10e0:	82 83       	std	Z+2, r24	; 0x02
    10e2:	93 83       	std	Z+3, r25	; 0x03
	copy_pstructDataptr->Period_Time_ms=(f32)t  * local_f32prescaler * 1000.0 / F_CPU;
    10e4:	b8 01       	movw	r22, r16
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 43 0a 	call	0x1486	; 0x1486 <__floatunsisf>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	c5 01       	movw	r24, r10
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a e7       	ldi	r20, 0x7A	; 122
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__mulsf3>
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	34 e2       	ldi	r19, 0x24	; 36
    110a:	44 e7       	ldi	r20, 0x74	; 116
    110c:	5b e4       	ldi	r21, 0x4B	; 75
    110e:	0e 94 a2 09 	call	0x1344	; 0x1344 <__divsf3>
    1112:	f7 01       	movw	r30, r14
    1114:	64 83       	std	Z+4, r22	; 0x04
    1116:	75 83       	std	Z+5, r23	; 0x05
    1118:	86 83       	std	Z+6, r24	; 0x06
    111a:	97 83       	std	Z+7, r25	; 0x07
	 		
}
    111c:	26 96       	adiw	r28, 0x06	; 6
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	9f 90       	pop	r9
    113a:	8f 90       	pop	r8
    113c:	08 95       	ret

0000113e <PWM_voidInitChannel_0>:
#include "DIO_interface.h"



void PWM_voidInitChannel_0(u8 copy_u8ModeType,u8 copy_u8OutputMode)
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	c8 2f       	mov	r28, r24
    1144:	d6 2f       	mov	r29, r22
	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	63 e0       	ldi	r22, 0x03	; 3
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0e 94 90 06 	call	0xd20	; 0xd20 <DIO_voidSetPinDirection>
	switch(copy_u8ModeType){
    1150:	c1 30       	cpi	r28, 0x01	; 1
    1152:	21 f0       	breq	.+8      	; 0x115c <PWM_voidInitChannel_0+0x1e>
    1154:	50 f0       	brcs	.+20     	; 0x116a <PWM_voidInitChannel_0+0x2c>
    1156:	c2 30       	cpi	r28, 0x02	; 2
    1158:	79 f0       	breq	.+30     	; 0x1178 <PWM_voidInitChannel_0+0x3a>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <PWM_voidInitChannel_0+0x46>
		case PWM_ModeType_0_PhaseCorrect:
		SET_BIT(TCCR0_REG, WGM00);
    115c:	83 b7       	in	r24, 0x33	; 51
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_REG, WGM01);
    1162:	83 b7       	in	r24, 0x33	; 51
    1164:	87 7f       	andi	r24, 0xF7	; 247
    1166:	83 bf       	out	0x33, r24	; 51
		break;
    1168:	0d c0       	rjmp	.+26     	; 0x1184 <PWM_voidInitChannel_0+0x46>
		
		case PWM_ModeType_0_CTC:
		CLR_BIT(TCCR0_REG, WGM00);
    116a:	83 b7       	in	r24, 0x33	; 51
    116c:	8f 7b       	andi	r24, 0xBF	; 191
    116e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG, WGM01);
    1170:	83 b7       	in	r24, 0x33	; 51
    1172:	88 60       	ori	r24, 0x08	; 8
    1174:	83 bf       	out	0x33, r24	; 51
		break;
    1176:	06 c0       	rjmp	.+12     	; 0x1184 <PWM_voidInitChannel_0+0x46>
		
		case PWM_ModeType_0_FastPWM:
		SET_BIT(TCCR0_REG, WGM00);
    1178:	83 b7       	in	r24, 0x33	; 51
    117a:	80 64       	ori	r24, 0x40	; 64
    117c:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG, WGM01);
    117e:	83 b7       	in	r24, 0x33	; 51
    1180:	88 60       	ori	r24, 0x08	; 8
    1182:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
	
	switch(copy_u8OutputMode)
    1184:	dd 23       	and	r29, r29
    1186:	19 f0       	breq	.+6      	; 0x118e <PWM_voidInitChannel_0+0x50>
    1188:	d1 30       	cpi	r29, 0x01	; 1
    118a:	41 f0       	breq	.+16     	; 0x119c <PWM_voidInitChannel_0+0x5e>
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <PWM_voidInitChannel_0+0x6a>
	{
		case PWM_CHANNEL_0_NONINVERTING:
		CLR_BIT(TCCR0_REG, COM00);
    118e:	83 b7       	in	r24, 0x33	; 51
    1190:	8f 7e       	andi	r24, 0xEF	; 239
    1192:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG, COM01);
    1194:	83 b7       	in	r24, 0x33	; 51
    1196:	80 62       	ori	r24, 0x20	; 32
    1198:	83 bf       	out	0x33, r24	; 51
		break;
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <PWM_voidInitChannel_0+0x6a>
		
		case PWM_CHANNEL_0_INVERTING:
		SET_BIT(TCCR0_REG, COM00);
    119c:	83 b7       	in	r24, 0x33	; 51
    119e:	80 61       	ori	r24, 0x10	; 16
    11a0:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG, COM01);
    11a2:	83 b7       	in	r24, 0x33	; 51
    11a4:	80 62       	ori	r24, 0x20	; 32
    11a6:	83 bf       	out	0x33, r24	; 51
		break;
	}
	
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <PWM_voidGenerateOnChannel_0>:


void PWM_voidGenerateOnChannel_0(u8 copy_u8Prescaler,u8 copy_u8OutputMode, u8 copy_u8DutyCycle)
{
    11ae:	58 2f       	mov	r21, r24
	if(copy_u8DutyCycle<=100)
    11b0:	45 36       	cpi	r20, 0x65	; 101
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <PWM_voidGenerateOnChannel_0+0x8>
    11b4:	59 c0       	rjmp	.+178    	; 0x1268 <PWM_voidGenerateOnChannel_0+0xba>
	{
		switch(copy_u8OutputMode)
    11b6:	66 23       	and	r22, r22
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <PWM_voidGenerateOnChannel_0+0x12>
    11ba:	61 30       	cpi	r22, 0x01	; 1
    11bc:	91 f0       	breq	.+36     	; 0x11e2 <PWM_voidGenerateOnChannel_0+0x34>
    11be:	22 c0       	rjmp	.+68     	; 0x1204 <PWM_voidGenerateOnChannel_0+0x56>
		{
			case PWM_CHANNEL_0_NONINVERTING:
			OCR0_REG = (((u16)copy_u8DutyCycle*256)/100)-1;
    11c0:	24 2f       	mov	r18, r20
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	32 2f       	mov	r19, r18
    11c6:	22 27       	eor	r18, r18
    11c8:	36 95       	lsr	r19
    11ca:	27 95       	ror	r18
    11cc:	36 95       	lsr	r19
    11ce:	27 95       	ror	r18
    11d0:	ab e7       	ldi	r26, 0x7B	; 123
    11d2:	b4 e1       	ldi	r27, 0x14	; 20
    11d4:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	8c bf       	out	0x3c, r24	; 60
			break;
    11e0:	11 c0       	rjmp	.+34     	; 0x1204 <PWM_voidGenerateOnChannel_0+0x56>
			
			case PWM_CHANNEL_0_INVERTING:
			copy_u8DutyCycle = 100 - copy_u8DutyCycle;
    11e2:	24 e6       	ldi	r18, 0x64	; 100
    11e4:	24 1b       	sub	r18, r20
			OCR0_REG = (((u16)copy_u8DutyCycle*256)/100)-1;
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	32 2f       	mov	r19, r18
    11ea:	22 27       	eor	r18, r18
    11ec:	36 95       	lsr	r19
    11ee:	27 95       	ror	r18
    11f0:	36 95       	lsr	r19
    11f2:	27 95       	ror	r18
    11f4:	ab e7       	ldi	r26, 0x7B	; 123
    11f6:	b4 e1       	ldi	r27, 0x14	; 20
    11f8:	0e 94 44 0b 	call	0x1688	; 0x1688 <__umulhisi3>
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	8c bf       	out	0x3c, r24	; 60
			break;
		}
		switch(copy_u8Prescaler){
    1204:	52 30       	cpi	r21, 0x02	; 2
    1206:	99 f0       	breq	.+38     	; 0x122e <PWM_voidGenerateOnChannel_0+0x80>
    1208:	18 f4       	brcc	.+6      	; 0x1210 <PWM_voidGenerateOnChannel_0+0x62>
    120a:	51 30       	cpi	r21, 0x01	; 1
    120c:	31 f0       	breq	.+12     	; 0x121a <PWM_voidGenerateOnChannel_0+0x6c>
    120e:	08 95       	ret
    1210:	53 30       	cpi	r21, 0x03	; 3
    1212:	b9 f0       	breq	.+46     	; 0x1242 <PWM_voidGenerateOnChannel_0+0x94>
    1214:	54 30       	cpi	r21, 0x04	; 4
    1216:	f9 f0       	breq	.+62     	; 0x1256 <PWM_voidGenerateOnChannel_0+0xa8>
    1218:	08 95       	ret
			case PWM_CHANNEL_Prescaler8:
			CLR_BIT(TCCR0_REG, CS00);
    121a:	83 b7       	in	r24, 0x33	; 51
    121c:	8e 7f       	andi	r24, 0xFE	; 254
    121e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_REG, CS01);
    1220:	83 b7       	in	r24, 0x33	; 51
    1222:	82 60       	ori	r24, 0x02	; 2
    1224:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_REG, CS02);
    1226:	83 b7       	in	r24, 0x33	; 51
    1228:	8b 7f       	andi	r24, 0xFB	; 251
    122a:	83 bf       	out	0x33, r24	; 51
			break;
    122c:	08 95       	ret
			case PWM_CHANNEL_Prescaler64:
			SET_BIT(TCCR0_REG, CS00);
    122e:	83 b7       	in	r24, 0x33	; 51
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_REG, CS01);
    1234:	83 b7       	in	r24, 0x33	; 51
    1236:	82 60       	ori	r24, 0x02	; 2
    1238:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_REG, CS02);
    123a:	83 b7       	in	r24, 0x33	; 51
    123c:	8b 7f       	andi	r24, 0xFB	; 251
    123e:	83 bf       	out	0x33, r24	; 51
			break;
    1240:	08 95       	ret
			case PWM_CHANNEL_Prescaler256:
			CLR_BIT(TCCR0_REG, CS00);
    1242:	83 b7       	in	r24, 0x33	; 51
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_REG, CS01);
    1248:	83 b7       	in	r24, 0x33	; 51
    124a:	8d 7f       	andi	r24, 0xFD	; 253
    124c:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_REG, CS02);
    124e:	83 b7       	in	r24, 0x33	; 51
    1250:	84 60       	ori	r24, 0x04	; 4
    1252:	83 bf       	out	0x33, r24	; 51
			break;
    1254:	08 95       	ret
			case PWM_CHANNEL_Prescaler1024:
			SET_BIT(TCCR0_REG, CS10);
    1256:	83 b7       	in	r24, 0x33	; 51
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_REG, CS11);
    125c:	83 b7       	in	r24, 0x33	; 51
    125e:	8d 7f       	andi	r24, 0xFD	; 253
    1260:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_REG, CS12);
    1262:	83 b7       	in	r24, 0x33	; 51
    1264:	84 60       	ori	r24, 0x04	; 4
    1266:	83 bf       	out	0x33, r24	; 51
    1268:	08 95       	ret

0000126a <__subsf3>:
    126a:	50 58       	subi	r21, 0x80	; 128

0000126c <__addsf3>:
    126c:	bb 27       	eor	r27, r27
    126e:	aa 27       	eor	r26, r26
    1270:	0e 94 4d 09 	call	0x129a	; 0x129a <__addsf3x>
    1274:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_round>
    1278:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_pscA>
    127c:	38 f0       	brcs	.+14     	; 0x128c <__addsf3+0x20>
    127e:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fp_pscB>
    1282:	20 f0       	brcs	.+8      	; 0x128c <__addsf3+0x20>
    1284:	39 f4       	brne	.+14     	; 0x1294 <__addsf3+0x28>
    1286:	9f 3f       	cpi	r25, 0xFF	; 255
    1288:	19 f4       	brne	.+6      	; 0x1290 <__addsf3+0x24>
    128a:	26 f4       	brtc	.+8      	; 0x1294 <__addsf3+0x28>
    128c:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    1290:	0e f4       	brtc	.+2      	; 0x1294 <__addsf3+0x28>
    1292:	e0 95       	com	r30
    1294:	e7 fb       	bst	r30, 7
    1296:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>

0000129a <__addsf3x>:
    129a:	e9 2f       	mov	r30, r25
    129c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_split3>
    12a0:	58 f3       	brcs	.-42     	; 0x1278 <__addsf3+0xc>
    12a2:	ba 17       	cp	r27, r26
    12a4:	62 07       	cpc	r22, r18
    12a6:	73 07       	cpc	r23, r19
    12a8:	84 07       	cpc	r24, r20
    12aa:	95 07       	cpc	r25, r21
    12ac:	20 f0       	brcs	.+8      	; 0x12b6 <__addsf3x+0x1c>
    12ae:	79 f4       	brne	.+30     	; 0x12ce <__addsf3x+0x34>
    12b0:	a6 f5       	brtc	.+104    	; 0x131a <__addsf3x+0x80>
    12b2:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__fp_zero>
    12b6:	0e f4       	brtc	.+2      	; 0x12ba <__addsf3x+0x20>
    12b8:	e0 95       	com	r30
    12ba:	0b 2e       	mov	r0, r27
    12bc:	ba 2f       	mov	r27, r26
    12be:	a0 2d       	mov	r26, r0
    12c0:	0b 01       	movw	r0, r22
    12c2:	b9 01       	movw	r22, r18
    12c4:	90 01       	movw	r18, r0
    12c6:	0c 01       	movw	r0, r24
    12c8:	ca 01       	movw	r24, r20
    12ca:	a0 01       	movw	r20, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	ff 27       	eor	r31, r31
    12d0:	59 1b       	sub	r21, r25
    12d2:	99 f0       	breq	.+38     	; 0x12fa <__addsf3x+0x60>
    12d4:	59 3f       	cpi	r21, 0xF9	; 249
    12d6:	50 f4       	brcc	.+20     	; 0x12ec <__addsf3x+0x52>
    12d8:	50 3e       	cpi	r21, 0xE0	; 224
    12da:	68 f1       	brcs	.+90     	; 0x1336 <__addsf3x+0x9c>
    12dc:	1a 16       	cp	r1, r26
    12de:	f0 40       	sbci	r31, 0x00	; 0
    12e0:	a2 2f       	mov	r26, r18
    12e2:	23 2f       	mov	r18, r19
    12e4:	34 2f       	mov	r19, r20
    12e6:	44 27       	eor	r20, r20
    12e8:	58 5f       	subi	r21, 0xF8	; 248
    12ea:	f3 cf       	rjmp	.-26     	; 0x12d2 <__addsf3x+0x38>
    12ec:	46 95       	lsr	r20
    12ee:	37 95       	ror	r19
    12f0:	27 95       	ror	r18
    12f2:	a7 95       	ror	r26
    12f4:	f0 40       	sbci	r31, 0x00	; 0
    12f6:	53 95       	inc	r21
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__addsf3x+0x52>
    12fa:	7e f4       	brtc	.+30     	; 0x131a <__addsf3x+0x80>
    12fc:	1f 16       	cp	r1, r31
    12fe:	ba 0b       	sbc	r27, r26
    1300:	62 0b       	sbc	r22, r18
    1302:	73 0b       	sbc	r23, r19
    1304:	84 0b       	sbc	r24, r20
    1306:	ba f0       	brmi	.+46     	; 0x1336 <__addsf3x+0x9c>
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	a1 f0       	breq	.+40     	; 0x1334 <__addsf3x+0x9a>
    130c:	ff 0f       	add	r31, r31
    130e:	bb 1f       	adc	r27, r27
    1310:	66 1f       	adc	r22, r22
    1312:	77 1f       	adc	r23, r23
    1314:	88 1f       	adc	r24, r24
    1316:	c2 f7       	brpl	.-16     	; 0x1308 <__addsf3x+0x6e>
    1318:	0e c0       	rjmp	.+28     	; 0x1336 <__addsf3x+0x9c>
    131a:	ba 0f       	add	r27, r26
    131c:	62 1f       	adc	r22, r18
    131e:	73 1f       	adc	r23, r19
    1320:	84 1f       	adc	r24, r20
    1322:	48 f4       	brcc	.+18     	; 0x1336 <__addsf3x+0x9c>
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	b7 95       	ror	r27
    132c:	f7 95       	ror	r31
    132e:	9e 3f       	cpi	r25, 0xFE	; 254
    1330:	08 f0       	brcs	.+2      	; 0x1334 <__addsf3x+0x9a>
    1332:	b0 cf       	rjmp	.-160    	; 0x1294 <__addsf3+0x28>
    1334:	93 95       	inc	r25
    1336:	88 0f       	add	r24, r24
    1338:	08 f0       	brcs	.+2      	; 0x133c <__addsf3x+0xa2>
    133a:	99 27       	eor	r25, r25
    133c:	ee 0f       	add	r30, r30
    133e:	97 95       	ror	r25
    1340:	87 95       	ror	r24
    1342:	08 95       	ret

00001344 <__divsf3>:
    1344:	0e 94 b6 09 	call	0x136c	; 0x136c <__divsf3x>
    1348:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_round>
    134c:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fp_pscB>
    1350:	58 f0       	brcs	.+22     	; 0x1368 <__divsf3+0x24>
    1352:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_pscA>
    1356:	40 f0       	brcs	.+16     	; 0x1368 <__divsf3+0x24>
    1358:	29 f4       	brne	.+10     	; 0x1364 <__divsf3+0x20>
    135a:	5f 3f       	cpi	r21, 0xFF	; 255
    135c:	29 f0       	breq	.+10     	; 0x1368 <__divsf3+0x24>
    135e:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    1362:	51 11       	cpse	r21, r1
    1364:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>
    1368:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>

0000136c <__divsf3x>:
    136c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_split3>
    1370:	68 f3       	brcs	.-38     	; 0x134c <__divsf3+0x8>

00001372 <__divsf3_pse>:
    1372:	99 23       	and	r25, r25
    1374:	b1 f3       	breq	.-20     	; 0x1362 <__divsf3+0x1e>
    1376:	55 23       	and	r21, r21
    1378:	91 f3       	breq	.-28     	; 0x135e <__divsf3+0x1a>
    137a:	95 1b       	sub	r25, r21
    137c:	55 0b       	sbc	r21, r21
    137e:	bb 27       	eor	r27, r27
    1380:	aa 27       	eor	r26, r26
    1382:	62 17       	cp	r22, r18
    1384:	73 07       	cpc	r23, r19
    1386:	84 07       	cpc	r24, r20
    1388:	38 f0       	brcs	.+14     	; 0x1398 <__divsf3_pse+0x26>
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	5f 4f       	sbci	r21, 0xFF	; 255
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	44 1f       	adc	r20, r20
    1394:	aa 1f       	adc	r26, r26
    1396:	a9 f3       	breq	.-22     	; 0x1382 <__divsf3_pse+0x10>
    1398:	35 d0       	rcall	.+106    	; 0x1404 <__divsf3_pse+0x92>
    139a:	0e 2e       	mov	r0, r30
    139c:	3a f0       	brmi	.+14     	; 0x13ac <__divsf3_pse+0x3a>
    139e:	e0 e8       	ldi	r30, 0x80	; 128
    13a0:	32 d0       	rcall	.+100    	; 0x1406 <__divsf3_pse+0x94>
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	e6 95       	lsr	r30
    13a8:	00 1c       	adc	r0, r0
    13aa:	ca f7       	brpl	.-14     	; 0x139e <__divsf3_pse+0x2c>
    13ac:	2b d0       	rcall	.+86     	; 0x1404 <__divsf3_pse+0x92>
    13ae:	fe 2f       	mov	r31, r30
    13b0:	29 d0       	rcall	.+82     	; 0x1404 <__divsf3_pse+0x92>
    13b2:	66 0f       	add	r22, r22
    13b4:	77 1f       	adc	r23, r23
    13b6:	88 1f       	adc	r24, r24
    13b8:	bb 1f       	adc	r27, r27
    13ba:	26 17       	cp	r18, r22
    13bc:	37 07       	cpc	r19, r23
    13be:	48 07       	cpc	r20, r24
    13c0:	ab 07       	cpc	r26, r27
    13c2:	b0 e8       	ldi	r27, 0x80	; 128
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <__divsf3_pse+0x56>
    13c6:	bb 0b       	sbc	r27, r27
    13c8:	80 2d       	mov	r24, r0
    13ca:	bf 01       	movw	r22, r30
    13cc:	ff 27       	eor	r31, r31
    13ce:	93 58       	subi	r25, 0x83	; 131
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	3a f0       	brmi	.+14     	; 0x13e2 <__divsf3_pse+0x70>
    13d4:	9e 3f       	cpi	r25, 0xFE	; 254
    13d6:	51 05       	cpc	r21, r1
    13d8:	78 f0       	brcs	.+30     	; 0x13f8 <__divsf3_pse+0x86>
    13da:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    13de:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	e4 f3       	brlt	.-8      	; 0x13de <__divsf3_pse+0x6c>
    13e6:	98 3e       	cpi	r25, 0xE8	; 232
    13e8:	d4 f3       	brlt	.-12     	; 0x13de <__divsf3_pse+0x6c>
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	f7 95       	ror	r31
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	c9 f7       	brne	.-14     	; 0x13ea <__divsf3_pse+0x78>
    13f8:	88 0f       	add	r24, r24
    13fa:	91 1d       	adc	r25, r1
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret
    1404:	e1 e0       	ldi	r30, 0x01	; 1
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	bb 1f       	adc	r27, r27
    140e:	62 17       	cp	r22, r18
    1410:	73 07       	cpc	r23, r19
    1412:	84 07       	cpc	r24, r20
    1414:	ba 07       	cpc	r27, r26
    1416:	20 f0       	brcs	.+8      	; 0x1420 <__divsf3_pse+0xae>
    1418:	62 1b       	sub	r22, r18
    141a:	73 0b       	sbc	r23, r19
    141c:	84 0b       	sbc	r24, r20
    141e:	ba 0b       	sbc	r27, r26
    1420:	ee 1f       	adc	r30, r30
    1422:	88 f7       	brcc	.-30     	; 0x1406 <__divsf3_pse+0x94>
    1424:	e0 95       	com	r30
    1426:	08 95       	ret

00001428 <__fixunssfsi>:
    1428:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_splitA>
    142c:	88 f0       	brcs	.+34     	; 0x1450 <__fixunssfsi+0x28>
    142e:	9f 57       	subi	r25, 0x7F	; 127
    1430:	98 f0       	brcs	.+38     	; 0x1458 <__fixunssfsi+0x30>
    1432:	b9 2f       	mov	r27, r25
    1434:	99 27       	eor	r25, r25
    1436:	b7 51       	subi	r27, 0x17	; 23
    1438:	b0 f0       	brcs	.+44     	; 0x1466 <__fixunssfsi+0x3e>
    143a:	e1 f0       	breq	.+56     	; 0x1474 <__fixunssfsi+0x4c>
    143c:	66 0f       	add	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	1a f0       	brmi	.+6      	; 0x144c <__fixunssfsi+0x24>
    1446:	ba 95       	dec	r27
    1448:	c9 f7       	brne	.-14     	; 0x143c <__fixunssfsi+0x14>
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <__fixunssfsi+0x4c>
    144c:	b1 30       	cpi	r27, 0x01	; 1
    144e:	91 f0       	breq	.+36     	; 0x1474 <__fixunssfsi+0x4c>
    1450:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__fp_zero>
    1454:	b1 e0       	ldi	r27, 0x01	; 1
    1456:	08 95       	ret
    1458:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__fp_zero>
    145c:	67 2f       	mov	r22, r23
    145e:	78 2f       	mov	r23, r24
    1460:	88 27       	eor	r24, r24
    1462:	b8 5f       	subi	r27, 0xF8	; 248
    1464:	39 f0       	breq	.+14     	; 0x1474 <__fixunssfsi+0x4c>
    1466:	b9 3f       	cpi	r27, 0xF9	; 249
    1468:	cc f3       	brlt	.-14     	; 0x145c <__fixunssfsi+0x34>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b3 95       	inc	r27
    1472:	d9 f7       	brne	.-10     	; 0x146a <__fixunssfsi+0x42>
    1474:	3e f4       	brtc	.+14     	; 0x1484 <__fixunssfsi+0x5c>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	08 95       	ret

00001486 <__floatunsisf>:
    1486:	e8 94       	clt
    1488:	09 c0       	rjmp	.+18     	; 0x149c <__floatsisf+0x12>

0000148a <__floatsisf>:
    148a:	97 fb       	bst	r25, 7
    148c:	3e f4       	brtc	.+14     	; 0x149c <__floatsisf+0x12>
    148e:	90 95       	com	r25
    1490:	80 95       	com	r24
    1492:	70 95       	com	r23
    1494:	61 95       	neg	r22
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	99 23       	and	r25, r25
    149e:	a9 f0       	breq	.+42     	; 0x14ca <__floatsisf+0x40>
    14a0:	f9 2f       	mov	r31, r25
    14a2:	96 e9       	ldi	r25, 0x96	; 150
    14a4:	bb 27       	eor	r27, r27
    14a6:	93 95       	inc	r25
    14a8:	f6 95       	lsr	r31
    14aa:	87 95       	ror	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b7 95       	ror	r27
    14b2:	f1 11       	cpse	r31, r1
    14b4:	f8 cf       	rjmp	.-16     	; 0x14a6 <__floatsisf+0x1c>
    14b6:	fa f4       	brpl	.+62     	; 0x14f6 <__floatsisf+0x6c>
    14b8:	bb 0f       	add	r27, r27
    14ba:	11 f4       	brne	.+4      	; 0x14c0 <__floatsisf+0x36>
    14bc:	60 ff       	sbrs	r22, 0
    14be:	1b c0       	rjmp	.+54     	; 0x14f6 <__floatsisf+0x6c>
    14c0:	6f 5f       	subi	r22, 0xFF	; 255
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	16 c0       	rjmp	.+44     	; 0x14f6 <__floatsisf+0x6c>
    14ca:	88 23       	and	r24, r24
    14cc:	11 f0       	breq	.+4      	; 0x14d2 <__floatsisf+0x48>
    14ce:	96 e9       	ldi	r25, 0x96	; 150
    14d0:	11 c0       	rjmp	.+34     	; 0x14f4 <__floatsisf+0x6a>
    14d2:	77 23       	and	r23, r23
    14d4:	21 f0       	breq	.+8      	; 0x14de <__floatsisf+0x54>
    14d6:	9e e8       	ldi	r25, 0x8E	; 142
    14d8:	87 2f       	mov	r24, r23
    14da:	76 2f       	mov	r23, r22
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <__floatsisf+0x5e>
    14de:	66 23       	and	r22, r22
    14e0:	71 f0       	breq	.+28     	; 0x14fe <__floatsisf+0x74>
    14e2:	96 e8       	ldi	r25, 0x86	; 134
    14e4:	86 2f       	mov	r24, r22
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	2a f0       	brmi	.+10     	; 0x14f6 <__floatsisf+0x6c>
    14ec:	9a 95       	dec	r25
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	da f7       	brpl	.-10     	; 0x14ec <__floatsisf+0x62>
    14f6:	88 0f       	add	r24, r24
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <__fp_inf>:
    1500:	97 f9       	bld	r25, 7
    1502:	9f 67       	ori	r25, 0x7F	; 127
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	08 95       	ret

0000150c <__fp_nan>:
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	80 ec       	ldi	r24, 0xC0	; 192
    1510:	08 95       	ret

00001512 <__fp_pscA>:
    1512:	00 24       	eor	r0, r0
    1514:	0a 94       	dec	r0
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	18 06       	cpc	r1, r24
    151c:	09 06       	cpc	r0, r25
    151e:	08 95       	ret

00001520 <__fp_pscB>:
    1520:	00 24       	eor	r0, r0
    1522:	0a 94       	dec	r0
    1524:	12 16       	cp	r1, r18
    1526:	13 06       	cpc	r1, r19
    1528:	14 06       	cpc	r1, r20
    152a:	05 06       	cpc	r0, r21
    152c:	08 95       	ret

0000152e <__fp_round>:
    152e:	09 2e       	mov	r0, r25
    1530:	03 94       	inc	r0
    1532:	00 0c       	add	r0, r0
    1534:	11 f4       	brne	.+4      	; 0x153a <__fp_round+0xc>
    1536:	88 23       	and	r24, r24
    1538:	52 f0       	brmi	.+20     	; 0x154e <__fp_round+0x20>
    153a:	bb 0f       	add	r27, r27
    153c:	40 f4       	brcc	.+16     	; 0x154e <__fp_round+0x20>
    153e:	bf 2b       	or	r27, r31
    1540:	11 f4       	brne	.+4      	; 0x1546 <__fp_round+0x18>
    1542:	60 ff       	sbrs	r22, 0
    1544:	04 c0       	rjmp	.+8      	; 0x154e <__fp_round+0x20>
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	08 95       	ret

00001550 <__fp_split3>:
    1550:	57 fd       	sbrc	r21, 7
    1552:	90 58       	subi	r25, 0x80	; 128
    1554:	44 0f       	add	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	59 f0       	breq	.+22     	; 0x1570 <__fp_splitA+0x10>
    155a:	5f 3f       	cpi	r21, 0xFF	; 255
    155c:	71 f0       	breq	.+28     	; 0x157a <__fp_splitA+0x1a>
    155e:	47 95       	ror	r20

00001560 <__fp_splitA>:
    1560:	88 0f       	add	r24, r24
    1562:	97 fb       	bst	r25, 7
    1564:	99 1f       	adc	r25, r25
    1566:	61 f0       	breq	.+24     	; 0x1580 <__fp_splitA+0x20>
    1568:	9f 3f       	cpi	r25, 0xFF	; 255
    156a:	79 f0       	breq	.+30     	; 0x158a <__fp_splitA+0x2a>
    156c:	87 95       	ror	r24
    156e:	08 95       	ret
    1570:	12 16       	cp	r1, r18
    1572:	13 06       	cpc	r1, r19
    1574:	14 06       	cpc	r1, r20
    1576:	55 1f       	adc	r21, r21
    1578:	f2 cf       	rjmp	.-28     	; 0x155e <__fp_split3+0xe>
    157a:	46 95       	lsr	r20
    157c:	f1 df       	rcall	.-30     	; 0x1560 <__fp_splitA>
    157e:	08 c0       	rjmp	.+16     	; 0x1590 <__fp_splitA+0x30>
    1580:	16 16       	cp	r1, r22
    1582:	17 06       	cpc	r1, r23
    1584:	18 06       	cpc	r1, r24
    1586:	99 1f       	adc	r25, r25
    1588:	f1 cf       	rjmp	.-30     	; 0x156c <__fp_splitA+0xc>
    158a:	86 95       	lsr	r24
    158c:	71 05       	cpc	r23, r1
    158e:	61 05       	cpc	r22, r1
    1590:	08 94       	sec
    1592:	08 95       	ret

00001594 <__fp_zero>:
    1594:	e8 94       	clt

00001596 <__fp_szero>:
    1596:	bb 27       	eor	r27, r27
    1598:	66 27       	eor	r22, r22
    159a:	77 27       	eor	r23, r23
    159c:	cb 01       	movw	r24, r22
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret

000015a2 <__mulsf3>:
    15a2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__mulsf3x>
    15a6:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_round>
    15aa:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_pscA>
    15ae:	38 f0       	brcs	.+14     	; 0x15be <__mulsf3+0x1c>
    15b0:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fp_pscB>
    15b4:	20 f0       	brcs	.+8      	; 0x15be <__mulsf3+0x1c>
    15b6:	95 23       	and	r25, r21
    15b8:	11 f0       	breq	.+4      	; 0x15be <__mulsf3+0x1c>
    15ba:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    15be:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    15c2:	11 24       	eor	r1, r1
    15c4:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>

000015c8 <__mulsf3x>:
    15c8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_split3>
    15cc:	70 f3       	brcs	.-36     	; 0x15aa <__mulsf3+0x8>

000015ce <__mulsf3_pse>:
    15ce:	95 9f       	mul	r25, r21
    15d0:	c1 f3       	breq	.-16     	; 0x15c2 <__mulsf3+0x20>
    15d2:	95 0f       	add	r25, r21
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	55 1f       	adc	r21, r21
    15d8:	62 9f       	mul	r22, r18
    15da:	f0 01       	movw	r30, r0
    15dc:	72 9f       	mul	r23, r18
    15de:	bb 27       	eor	r27, r27
    15e0:	f0 0d       	add	r31, r0
    15e2:	b1 1d       	adc	r27, r1
    15e4:	63 9f       	mul	r22, r19
    15e6:	aa 27       	eor	r26, r26
    15e8:	f0 0d       	add	r31, r0
    15ea:	b1 1d       	adc	r27, r1
    15ec:	aa 1f       	adc	r26, r26
    15ee:	64 9f       	mul	r22, r20
    15f0:	66 27       	eor	r22, r22
    15f2:	b0 0d       	add	r27, r0
    15f4:	a1 1d       	adc	r26, r1
    15f6:	66 1f       	adc	r22, r22
    15f8:	82 9f       	mul	r24, r18
    15fa:	22 27       	eor	r18, r18
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	62 1f       	adc	r22, r18
    1602:	73 9f       	mul	r23, r19
    1604:	b0 0d       	add	r27, r0
    1606:	a1 1d       	adc	r26, r1
    1608:	62 1f       	adc	r22, r18
    160a:	83 9f       	mul	r24, r19
    160c:	a0 0d       	add	r26, r0
    160e:	61 1d       	adc	r22, r1
    1610:	22 1f       	adc	r18, r18
    1612:	74 9f       	mul	r23, r20
    1614:	33 27       	eor	r19, r19
    1616:	a0 0d       	add	r26, r0
    1618:	61 1d       	adc	r22, r1
    161a:	23 1f       	adc	r18, r19
    161c:	84 9f       	mul	r24, r20
    161e:	60 0d       	add	r22, r0
    1620:	21 1d       	adc	r18, r1
    1622:	82 2f       	mov	r24, r18
    1624:	76 2f       	mov	r23, r22
    1626:	6a 2f       	mov	r22, r26
    1628:	11 24       	eor	r1, r1
    162a:	9f 57       	subi	r25, 0x7F	; 127
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	9a f0       	brmi	.+38     	; 0x1656 <__mulsf3_pse+0x88>
    1630:	f1 f0       	breq	.+60     	; 0x166e <__mulsf3_pse+0xa0>
    1632:	88 23       	and	r24, r24
    1634:	4a f0       	brmi	.+18     	; 0x1648 <__mulsf3_pse+0x7a>
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	bb 1f       	adc	r27, r27
    163c:	66 1f       	adc	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	91 50       	subi	r25, 0x01	; 1
    1644:	50 40       	sbci	r21, 0x00	; 0
    1646:	a9 f7       	brne	.-22     	; 0x1632 <__mulsf3_pse+0x64>
    1648:	9e 3f       	cpi	r25, 0xFE	; 254
    164a:	51 05       	cpc	r21, r1
    164c:	80 f0       	brcs	.+32     	; 0x166e <__mulsf3_pse+0xa0>
    164e:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    1652:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>
    1656:	5f 3f       	cpi	r21, 0xFF	; 255
    1658:	e4 f3       	brlt	.-8      	; 0x1652 <__mulsf3_pse+0x84>
    165a:	98 3e       	cpi	r25, 0xE8	; 232
    165c:	d4 f3       	brlt	.-12     	; 0x1652 <__mulsf3_pse+0x84>
    165e:	86 95       	lsr	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	b7 95       	ror	r27
    1666:	f7 95       	ror	r31
    1668:	e7 95       	ror	r30
    166a:	9f 5f       	subi	r25, 0xFF	; 255
    166c:	c1 f7       	brne	.-16     	; 0x165e <__mulsf3_pse+0x90>
    166e:	fe 2b       	or	r31, r30
    1670:	88 0f       	add	r24, r24
    1672:	91 1d       	adc	r25, r1
    1674:	96 95       	lsr	r25
    1676:	87 95       	ror	r24
    1678:	97 f9       	bld	r25, 7
    167a:	08 95       	ret

0000167c <__tablejump2__>:
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	05 90       	lpm	r0, Z+
    1682:	f4 91       	lpm	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	09 94       	ijmp

00001688 <__umulhisi3>:
    1688:	a2 9f       	mul	r26, r18
    168a:	b0 01       	movw	r22, r0
    168c:	b3 9f       	mul	r27, r19
    168e:	c0 01       	movw	r24, r0
    1690:	a3 9f       	mul	r26, r19
    1692:	70 0d       	add	r23, r0
    1694:	81 1d       	adc	r24, r1
    1696:	11 24       	eor	r1, r1
    1698:	91 1d       	adc	r25, r1
    169a:	b2 9f       	mul	r27, r18
    169c:	70 0d       	add	r23, r0
    169e:	81 1d       	adc	r24, r1
    16a0:	11 24       	eor	r1, r1
    16a2:	91 1d       	adc	r25, r1
    16a4:	08 95       	ret

000016a6 <__ashrdi3>:
    16a6:	97 fb       	bst	r25, 7
    16a8:	10 f8       	bld	r1, 0

000016aa <__lshrdi3>:
    16aa:	16 94       	lsr	r1
    16ac:	00 08       	sbc	r0, r0
    16ae:	0f 93       	push	r16
    16b0:	08 30       	cpi	r16, 0x08	; 8
    16b2:	98 f0       	brcs	.+38     	; 0x16da <__lshrdi3+0x30>
    16b4:	08 50       	subi	r16, 0x08	; 8
    16b6:	23 2f       	mov	r18, r19
    16b8:	34 2f       	mov	r19, r20
    16ba:	45 2f       	mov	r20, r21
    16bc:	56 2f       	mov	r21, r22
    16be:	67 2f       	mov	r22, r23
    16c0:	78 2f       	mov	r23, r24
    16c2:	89 2f       	mov	r24, r25
    16c4:	90 2d       	mov	r25, r0
    16c6:	f4 cf       	rjmp	.-24     	; 0x16b0 <__lshrdi3+0x6>
    16c8:	05 94       	asr	r0
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	77 95       	ror	r23
    16d0:	67 95       	ror	r22
    16d2:	57 95       	ror	r21
    16d4:	47 95       	ror	r20
    16d6:	37 95       	ror	r19
    16d8:	27 95       	ror	r18
    16da:	0a 95       	dec	r16
    16dc:	aa f7       	brpl	.-22     	; 0x16c8 <__lshrdi3+0x1e>
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <_exit>:
    16e2:	f8 94       	cli

000016e4 <__stop_program>:
    16e4:	ff cf       	rjmp	.-2      	; 0x16e4 <__stop_program>
